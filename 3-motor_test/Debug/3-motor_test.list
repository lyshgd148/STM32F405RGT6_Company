
3-motor_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a2c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003bb4  08003bb4  00004bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc4  08003bc4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003bc4  08003bc4  00004bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bcc  08003bcc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bcc  08003bcc  00004bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bd0  08003bd0  00004bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003bd4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000120  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000012c  2000012c  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b2c7  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f8a  00000000  00000000  00010303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be0  00000000  00000000  00012290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000914  00000000  00000000  00012e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ee8e  00000000  00000000  00013784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db78  00000000  00000000  00032612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bd28b  00000000  00000000  0004018a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fd415  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030e4  00000000  00000000  000fd458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  0010053c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b9c 	.word	0x08003b9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003b9c 	.word	0x08003b9c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004f8:	4b17      	ldr	r3, [pc, #92]	@ (8000558 <MX_CAN1_Init+0x64>)
 80004fa:	4a18      	ldr	r2, [pc, #96]	@ (800055c <MX_CAN1_Init+0x68>)
 80004fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80004fe:	4b16      	ldr	r3, [pc, #88]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000500:	2205      	movs	r2, #5
 8000502:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000504:	4b14      	ldr	r3, [pc, #80]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800050a:	4b13      	ldr	r3, [pc, #76]	@ (8000558 <MX_CAN1_Init+0x64>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000510:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000512:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000516:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000518:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <MX_CAN1_Init+0x64>)
 800051a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800051e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000520:	4b0d      	ldr	r3, [pc, #52]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000522:	2200      	movs	r2, #0
 8000524:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000528:	2201      	movs	r2, #1
 800052a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 800052c:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <MX_CAN1_Init+0x64>)
 800052e:	2201      	movs	r2, #1
 8000530:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000532:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000534:	2200      	movs	r2, #0
 8000536:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000538:	4b07      	ldr	r3, [pc, #28]	@ (8000558 <MX_CAN1_Init+0x64>)
 800053a:	2200      	movs	r2, #0
 800053c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800053e:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000540:	2200      	movs	r2, #0
 8000542:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000544:	4804      	ldr	r0, [pc, #16]	@ (8000558 <MX_CAN1_Init+0x64>)
 8000546:	f000 fd31 	bl	8000fac <HAL_CAN_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000550:	f000 fb14 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000030 	.word	0x20000030
 800055c:	40006400 	.word	0x40006400

08000560 <CAN1_Config>:

void CAN1_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef  sFilterConfig;

  /* Configure the CAN Filter */
  sFilterConfig.FilterBank = 0;                      // 过滤器编号，使用�??个CAN，则可�??0-13；使用两个CAN可�??0-27
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;  // 过滤器模式，掩码模式或列表模�??
 800056a:	2300      	movs	r3, #0
 800056c:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // 过滤器位�??
 800056e:	2301      	movs	r3, #1
 8000570:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;               // 过滤器验证码ID�??16位，0-0xFFFF
 8000572:	2300      	movs	r3, #0
 8000574:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;                // 过滤器验证码ID�??16位，0-0xFFFF
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;           // 过滤器掩码ID�??16位，0-0xFFFF
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;            // 过滤器掩码ID�??16位，0-0xFFFF
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; // FIFOx�??0�??1
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;           // 使能过滤�??
 8000586:	2301      	movs	r3, #1
 8000588:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;           // 从过滤器编号�??0-27，对于单CAN实例该参数没有意�??
 800058a:	230e      	movs	r3, #14
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800058e:	463b      	mov	r3, r7
 8000590:	4619      	mov	r1, r3
 8000592:	4807      	ldr	r0, [pc, #28]	@ (80005b0 <CAN1_Config+0x50>)
 8000594:	f000 fe06 	bl	80011a4 <HAL_CAN_ConfigFilter>
  {
    /* Filter configuration Error */
  }

  /* Start the CAN peripheral */
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000598:	4805      	ldr	r0, [pc, #20]	@ (80005b0 <CAN1_Config+0x50>)
 800059a:	f000 fee1 	bl	8001360 <HAL_CAN_Start>
  {
    /* Start Error */
  }

  /* Activate CAN RX notification */
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800059e:	2102      	movs	r1, #2
 80005a0:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <CAN1_Config+0x50>)
 80005a2:	f001 f948 	bl	8001836 <HAL_CAN_ActivateNotification>
  {
    /* Notification Error */
  }
}
 80005a6:	bf00      	nop
 80005a8:	3728      	adds	r7, #40	@ 0x28
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000030 	.word	0x20000030

080005b4 <canCRC_ATM>:

uint8_t canCRC_ATM(uint8_t *buf,uint8_t len,uint8_t id) //CRC_SUM8
{
 80005b4:	b480      	push	{r7}
 80005b6:	b087      	sub	sp, #28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	70fb      	strb	r3, [r7, #3]
 80005c0:	4613      	mov	r3, r2
 80005c2:	70bb      	strb	r3, [r7, #2]
	uint32_t i;
	uint8_t check_sum;
	uint32_t sum = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]

	for(i=0;i<len;i++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	e00a      	b.n	80005e4 <canCRC_ATM+0x30>
	{
		sum += buf[i];
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	4413      	add	r3, r2
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	461a      	mov	r2, r3
 80005d8:	693b      	ldr	r3, [r7, #16]
 80005da:	4413      	add	r3, r2
 80005dc:	613b      	str	r3, [r7, #16]
	for(i=0;i<len;i++)
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	3301      	adds	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	78fb      	ldrb	r3, [r7, #3]
 80005e6:	697a      	ldr	r2, [r7, #20]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d3f0      	bcc.n	80005ce <canCRC_ATM+0x1a>
	}
	sum += id;//CAN_ID;
 80005ec:	78bb      	ldrb	r3, [r7, #2]
 80005ee:	693a      	ldr	r2, [r7, #16]
 80005f0:	4413      	add	r3, r2
 80005f2:	613b      	str	r3, [r7, #16]
	check_sum = sum & 0xFF;
 80005f4:	693b      	ldr	r3, [r7, #16]
 80005f6:	73fb      	strb	r3, [r7, #15]
	return check_sum;
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	371c      	adds	r7, #28
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <CAN1_Send_Msg>:


uint8_t CAN1_Send_Msg(uint8_t* msg, uint8_t len, uint16_t id)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b08d      	sub	sp, #52	@ 0x34
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
 8000614:	4613      	mov	r3, r2
 8000616:	803b      	strh	r3, [r7, #0]
  uint8_t i=0;
 8000618:	2300      	movs	r3, #0
 800061a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t message[8];
  uint32_t TxMailbox;
  CAN_TxHeaderTypeDef CAN_TxHeader;

  CAN_TxHeader.StdId = id;                 // 标准标识(12bit)
 800061e:	883b      	ldrh	r3, [r7, #0]
 8000620:	60bb      	str	r3, [r7, #8]
  CAN_TxHeader.ExtId = id;                 // 扩展标识(29bit)
 8000622:	883b      	ldrh	r3, [r7, #0]
 8000624:	60fb      	str	r3, [r7, #12]
  CAN_TxHeader.IDE = CAN_ID_STD;           // 标准
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
  CAN_TxHeader.RTR = CAN_RTR_DATA;         // 数据
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  CAN_TxHeader.DLC = len;
 800062e:	78fb      	ldrb	r3, [r7, #3]
 8000630:	61bb      	str	r3, [r7, #24]
  CAN_TxHeader.TransmitGlobalTime = DISABLE;
 8000632:	2300      	movs	r3, #0
 8000634:	773b      	strb	r3, [r7, #28]

  for(i = 0; i < len-1; i++)
 8000636:	2300      	movs	r3, #0
 8000638:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800063c:	e00f      	b.n	800065e <CAN1_Send_Msg+0x56>
  {
    message[i] = msg[i];
 800063e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	441a      	add	r2, r3
 8000646:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800064a:	7812      	ldrb	r2, [r2, #0]
 800064c:	3330      	adds	r3, #48	@ 0x30
 800064e:	443b      	add	r3, r7
 8000650:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(i = 0; i < len-1; i++)
 8000654:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000658:	3301      	adds	r3, #1
 800065a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800065e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000662:	78fb      	ldrb	r3, [r7, #3]
 8000664:	3b01      	subs	r3, #1
 8000666:	429a      	cmp	r2, r3
 8000668:	dbe9      	blt.n	800063e <CAN1_Send_Msg+0x36>
  }
  message[len-1] = canCRC_ATM(msg,len-1,id);
 800066a:	78fb      	ldrb	r3, [r7, #3]
 800066c:	3b01      	subs	r3, #1
 800066e:	b2d9      	uxtb	r1, r3
 8000670:	883b      	ldrh	r3, [r7, #0]
 8000672:	b2da      	uxtb	r2, r3
 8000674:	78fb      	ldrb	r3, [r7, #3]
 8000676:	1e5c      	subs	r4, r3, #1
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff ff9b 	bl	80005b4 <canCRC_ATM>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8000686:	443b      	add	r3, r7
 8000688:	f803 2c0c 	strb.w	r2, [r3, #-12]

  if(HAL_CAN_AddTxMessage(&hcan1, &CAN_TxHeader, message, &TxMailbox) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000694:	f107 0108 	add.w	r1, r7, #8
 8000698:	4809      	ldr	r0, [pc, #36]	@ (80006c0 <CAN1_Send_Msg+0xb8>)
 800069a:	f000 fea5 	bl	80013e8 <HAL_CAN_AddTxMessage>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <CAN1_Send_Msg+0xa0>
  {
    return 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	e007      	b.n	80006b8 <CAN1_Send_Msg+0xb0>
  }
  // 等待 CAN1 所有 3 个发送邮箱都变空
  while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3)
 80006a8:	bf00      	nop
 80006aa:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <CAN1_Send_Msg+0xb8>)
 80006ac:	f000 ff6c 	bl	8001588 <HAL_CAN_GetTxMailboxesFreeLevel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	d1f9      	bne.n	80006aa <CAN1_Send_Msg+0xa2>
  {

  }
  return 0;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3734      	adds	r7, #52	@ 0x34
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd90      	pop	{r4, r7, pc}
 80006c0:	20000030 	.word	0x20000030

080006c4 <canDataReceived>:


void canDataReceived(uint8_t *buf, uint8_t len, uint8_t id)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	70fb      	strb	r3, [r7, #3]
 80006d0:	4613      	mov	r3, r2
 80006d2:	70bb      	strb	r3, [r7, #2]

	uint8_t i;

	for(i=0;i<motor_num;i++)
 80006d4:	2300      	movs	r3, #0
 80006d6:	73fb      	strb	r3, [r7, #15]
 80006d8:	e02f      	b.n	800073a <canDataReceived+0x76>
	{
		if(id==(i+1))
 80006da:	78ba      	ldrb	r2, [r7, #2]
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	3301      	adds	r3, #1
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d127      	bne.n	8000734 <canDataReceived+0x70>
		{
			if((buf[0]==0x91 && buf[1]==0x02 )||(buf[0]==0xF5 && buf[1]==0x02) )  //回零结束应答 || 位置控制成功应答
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b91      	cmp	r3, #145	@ 0x91
 80006ea:	d104      	bne.n	80006f6 <canDataReceived+0x32>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3301      	adds	r3, #1
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d008      	beq.n	8000708 <canDataReceived+0x44>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2bf5      	cmp	r3, #245	@ 0xf5
 80006fc:	d10a      	bne.n	8000714 <canDataReceived+0x50>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3301      	adds	r3, #1
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b02      	cmp	r3, #2
 8000706:	d105      	bne.n	8000714 <canDataReceived+0x50>
			{
				motor_statuses[i].is_reach=1;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	4a11      	ldr	r2, [pc, #68]	@ (8000750 <canDataReceived+0x8c>)
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4413      	add	r3, r2
 8000710:	2201      	movs	r2, #1
 8000712:	705a      	strb	r2, [r3, #1]
			}

			if(buf[0]==0xF5 && buf[1]==0x00)//位置控制失败应答
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2bf5      	cmp	r3, #245	@ 0xf5
 800071a:	d112      	bne.n	8000742 <canDataReceived+0x7e>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3301      	adds	r3, #1
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d10d      	bne.n	8000742 <canDataReceived+0x7e>
			{
				motor_statuses[i].is_reach=0;
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	4a09      	ldr	r2, [pc, #36]	@ (8000750 <canDataReceived+0x8c>)
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	4413      	add	r3, r2
 800072e:	2200      	movs	r2, #0
 8000730:	705a      	strb	r2, [r3, #1]
			}

			break;
 8000732:	e006      	b.n	8000742 <canDataReceived+0x7e>
	for(i=0;i<motor_num;i++)
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	3301      	adds	r3, #1
 8000738:	73fb      	strb	r3, [r7, #15]
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	2b04      	cmp	r3, #4
 800073e:	d9cc      	bls.n	80006da <canDataReceived+0x16>
		}

	}
}
 8000740:	e000      	b.n	8000744 <canDataReceived+0x80>
			break;
 8000742:	bf00      	nop
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	200000ec 	.word	0x200000ec

08000754 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	@ 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a1d      	ldr	r2, [pc, #116]	@ (80007e8 <HAL_CAN_MspInit+0x94>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d134      	bne.n	80007e0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <HAL_CAN_MspInit+0x98>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077e:	4a1b      	ldr	r2, [pc, #108]	@ (80007ec <HAL_CAN_MspInit+0x98>)
 8000780:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000784:	6413      	str	r3, [r2, #64]	@ 0x40
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <HAL_CAN_MspInit+0x98>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <HAL_CAN_MspInit+0x98>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a14      	ldr	r2, [pc, #80]	@ (80007ec <HAL_CAN_MspInit+0x98>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <HAL_CAN_MspInit+0x98>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007c0:	2309      	movs	r3, #9
 80007c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	4809      	ldr	r0, [pc, #36]	@ (80007f0 <HAL_CAN_MspInit+0x9c>)
 80007cc:	f001 fb9a 	bl	8001f04 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	2014      	movs	r0, #20
 80007d6:	f001 fb5e 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80007da:	2014      	movs	r0, #20
 80007dc:	f001 fb77 	bl	8001ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	@ 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40006400 	.word	0x40006400
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020400 	.word	0x40020400

080007f4 <HAL_CAN_RxFifo0MsgPendingCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08c      	sub	sp, #48	@ 0x30
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  uint8_t RxData[8];
  CAN_RxHeaderTypeDef CAN_RxHeader;

  if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN_RxHeader, RxData) == HAL_OK)
 80007fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000800:	f107 020c 	add.w	r2, r7, #12
 8000804:	2100      	movs	r1, #0
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f000 fef3 	bl	80015f2 <HAL_CAN_GetRxMessage>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d108      	bne.n	8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
  {
	  canDataReceived(RxData,CAN_RxHeader.DLC,CAN_RxHeader.StdId);
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	b2d9      	uxtb	r1, r3
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	b2da      	uxtb	r2, r3
 800081a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff ff50 	bl	80006c4 <canDataReceived>
  }
}
 8000824:	bf00      	nop
 8000826:	3730      	adds	r7, #48	@ 0x30
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PB6   ------> USART1_TX
     PB7   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	@ 0x28
 8000830:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b77      	ldr	r3, [pc, #476]	@ (8000a24 <MX_GPIO_Init+0x1f8>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a76      	ldr	r2, [pc, #472]	@ (8000a24 <MX_GPIO_Init+0x1f8>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b74      	ldr	r3, [pc, #464]	@ (8000a24 <MX_GPIO_Init+0x1f8>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b70      	ldr	r3, [pc, #448]	@ (8000a24 <MX_GPIO_Init+0x1f8>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a6f      	ldr	r2, [pc, #444]	@ (8000a24 <MX_GPIO_Init+0x1f8>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b6d      	ldr	r3, [pc, #436]	@ (8000a24 <MX_GPIO_Init+0x1f8>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	4b69      	ldr	r3, [pc, #420]	@ (8000a24 <MX_GPIO_Init+0x1f8>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a68      	ldr	r2, [pc, #416]	@ (8000a24 <MX_GPIO_Init+0x1f8>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b66      	ldr	r3, [pc, #408]	@ (8000a24 <MX_GPIO_Init+0x1f8>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b62      	ldr	r3, [pc, #392]	@ (8000a24 <MX_GPIO_Init+0x1f8>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a61      	ldr	r2, [pc, #388]	@ (8000a24 <MX_GPIO_Init+0x1f8>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b5f      	ldr	r3, [pc, #380]	@ (8000a24 <MX_GPIO_Init+0x1f8>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b5b      	ldr	r3, [pc, #364]	@ (8000a24 <MX_GPIO_Init+0x1f8>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a5a      	ldr	r2, [pc, #360]	@ (8000a24 <MX_GPIO_Init+0x1f8>)
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b58      	ldr	r3, [pc, #352]	@ (8000a24 <MX_GPIO_Init+0x1f8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0308 	and.w	r3, r3, #8
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_Pin|LED2_Pin|LED1_Pin|Y13_Pin
 80008ce:	2201      	movs	r2, #1
 80008d0:	f64f 71cf 	movw	r1, #65487	@ 0xffcf
 80008d4:	4854      	ldr	r0, [pc, #336]	@ (8000a28 <MX_GPIO_Init+0x1fc>)
 80008d6:	f001 fcc9 	bl	800226c <HAL_GPIO_WritePin>
                          |Y14_Pin|Y15_Pin|Y16_Pin|Y1_Pin
                          |Y2_Pin|Y3_Pin|Y4_Pin|Y7_Pin
                          |Y8_Pin|Y9_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Y5_Pin|Y6_Pin, GPIO_PIN_SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80008e0:	4852      	ldr	r0, [pc, #328]	@ (8000a2c <MX_GPIO_Init+0x200>)
 80008e2:	f001 fcc3 	bl	800226c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Y10_GPIO_Port, Y10_Pin, GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2104      	movs	r1, #4
 80008ea:	4851      	ldr	r0, [pc, #324]	@ (8000a30 <MX_GPIO_Init+0x204>)
 80008ec:	f001 fcbe 	bl	800226c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y11_Pin|Y12_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2118      	movs	r1, #24
 80008f4:	484f      	ldr	r0, [pc, #316]	@ (8000a34 <MX_GPIO_Init+0x208>)
 80008f6:	f001 fcb9 	bl	800226c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin LED1_Pin Y13_Pin
                           Y14_Pin Y15_Pin Y16_Pin Y1_Pin
                           Y2_Pin Y3_Pin Y4_Pin Y7_Pin
                           Y8_Pin Y9_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin|Y13_Pin
 80008fa:	f64f 73cf 	movw	r3, #65487	@ 0xffcf
 80008fe:	617b      	str	r3, [r7, #20]
                          |Y14_Pin|Y15_Pin|Y16_Pin|Y1_Pin
                          |Y2_Pin|Y3_Pin|Y4_Pin|Y7_Pin
                          |Y8_Pin|Y9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4845      	ldr	r0, [pc, #276]	@ (8000a28 <MX_GPIO_Init+0x1fc>)
 8000914:	f001 faf6 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : X1_Pin X2_Pin X3_Pin X4_Pin
                           X5_Pin X6_Pin */
  GPIO_InitStruct.Pin = X1_Pin|X2_Pin|X3_Pin|X4_Pin
 8000918:	23f3      	movs	r3, #243	@ 0xf3
 800091a:	617b      	str	r3, [r7, #20]
                          |X5_Pin|X6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4840      	ldr	r0, [pc, #256]	@ (8000a2c <MX_GPIO_Init+0x200>)
 800092c:	f001 faea 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000930:	230c      	movs	r3, #12
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000940:	2307      	movs	r3, #7
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	4838      	ldr	r0, [pc, #224]	@ (8000a2c <MX_GPIO_Init+0x200>)
 800094c:	f001 fada 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : X7_Pin X8_Pin */
  GPIO_InitStruct.Pin = X7_Pin|X8_Pin;
 8000950:	2330      	movs	r3, #48	@ 0x30
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	4831      	ldr	r0, [pc, #196]	@ (8000a28 <MX_GPIO_Init+0x1fc>)
 8000964:	f001 face 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : X9_Pin X10_Pin X11_Pin X12_Pin
                           X13_Pin X14_Pin X15_Pin X16_Pin */
  GPIO_InitStruct.Pin = X9_Pin|X10_Pin|X11_Pin|X12_Pin
 8000968:	f647 4307 	movw	r3, #31751	@ 0x7c07
 800096c:	617b      	str	r3, [r7, #20]
                          |X13_Pin|X14_Pin|X15_Pin|X16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	482d      	ldr	r0, [pc, #180]	@ (8000a34 <MX_GPIO_Init+0x208>)
 800097e:	f001 fac1 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y5_Pin Y6_Pin */
  GPIO_InitStruct.Pin = Y5_Pin|Y6_Pin;
 8000982:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	4824      	ldr	r0, [pc, #144]	@ (8000a2c <MX_GPIO_Init+0x200>)
 800099c:	f001 fab2 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009a0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ae:	2303      	movs	r3, #3
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009b2:	230a      	movs	r3, #10
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	481b      	ldr	r0, [pc, #108]	@ (8000a2c <MX_GPIO_Init+0x200>)
 80009be:	f001 faa1 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : Y10_Pin */
  GPIO_InitStruct.Pin = Y10_Pin;
 80009c2:	2304      	movs	r3, #4
 80009c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Y10_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	4815      	ldr	r0, [pc, #84]	@ (8000a30 <MX_GPIO_Init+0x204>)
 80009da:	f001 fa93 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y11_Pin Y12_Pin */
  GPIO_InitStruct.Pin = Y11_Pin|Y12_Pin;
 80009de:	2318      	movs	r3, #24
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	480f      	ldr	r0, [pc, #60]	@ (8000a34 <MX_GPIO_Init+0x208>)
 80009f6:	f001 fa85 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009fa:	23c0      	movs	r3, #192	@ 0xc0
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	4807      	ldr	r0, [pc, #28]	@ (8000a34 <MX_GPIO_Init+0x208>)
 8000a16:	f001 fa75 	bl	8001f04 <HAL_GPIO_Init>

}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	@ 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40020c00 	.word	0x40020c00
 8000a34:	40020400 	.word	0x40020400

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f000 fa20 	bl	8000e80 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f832 	bl	8000aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f7ff fef2 	bl	800082c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000a48:	f000 f926 	bl	8000c98 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000a4c:	f000 f972 	bl	8000d34 <MX_TIM6_Init>
  MX_CAN1_Init();
 8000a50:	f7ff fd50 	bl	80004f4 <MX_CAN1_Init>

  /* USER CODE BEGIN 2 */
  CAN1_Config();
 8000a54:	f7ff fd84 	bl	8000560 <CAN1_Config>
  Motor_Init();
 8000a58:	f002 fca8 	bl	80033ac <Motor_Init>
  Position_Init(0,0,150);
 8000a5c:	2296      	movs	r2, #150	@ 0x96
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2000      	movs	r0, #0
 8000a62:	f002 fdf7 	bl	8003654 <Position_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(Y6_GPIO_Port, Y6_Pin, GPIO_PIN_RESET);//yellowled_S
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a6c:	480c      	ldr	r0, [pc, #48]	@ (8000aa0 <main+0x68>)
 8000a6e:	f001 fbfd 	bl	800226c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000a72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a76:	f000 fa75 	bl	8000f64 <HAL_Delay>
  motor_AllGoHome();
 8000a7a:	f002 fccf 	bl	800341c <motor_AllGoHome>
  HAL_Delay(1000);
 8000a7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a82:	f000 fa6f 	bl	8000f64 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */

	Sys_Run(tray_num-1);
 8000a86:	2004      	movs	r0, #4
 8000a88:	f003 f844 	bl	8003b14 <Sys_Run>
	HAL_Delay(50);
 8000a8c:	2032      	movs	r0, #50	@ 0x32
 8000a8e:	f000 fa69 	bl	8000f64 <HAL_Delay>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000a92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a96:	4803      	ldr	r0, [pc, #12]	@ (8000aa4 <main+0x6c>)
 8000a98:	f001 fc01 	bl	800229e <HAL_GPIO_TogglePin>
	Sys_Run(tray_num-1);
 8000a9c:	bf00      	nop
 8000a9e:	e7f2      	b.n	8000a86 <main+0x4e>
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	40020800 	.word	0x40020800

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b094      	sub	sp, #80	@ 0x50
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 0320 	add.w	r3, r7, #32
 8000ab2:	2230      	movs	r2, #48	@ 0x30
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f003 f843 	bl	8003b42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	4b28      	ldr	r3, [pc, #160]	@ (8000b74 <SystemClock_Config+0xcc>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad4:	4a27      	ldr	r2, [pc, #156]	@ (8000b74 <SystemClock_Config+0xcc>)
 8000ad6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ada:	6413      	str	r3, [r2, #64]	@ 0x40
 8000adc:	4b25      	ldr	r3, [pc, #148]	@ (8000b74 <SystemClock_Config+0xcc>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	4b22      	ldr	r3, [pc, #136]	@ (8000b78 <SystemClock_Config+0xd0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a21      	ldr	r2, [pc, #132]	@ (8000b78 <SystemClock_Config+0xd0>)
 8000af2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b78 <SystemClock_Config+0xd0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b04:	2301      	movs	r3, #1
 8000b06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b12:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000b1c:	2364      	movs	r3, #100	@ 0x64
 8000b1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b24:	2304      	movs	r3, #4
 8000b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b28:	f107 0320 	add.w	r3, r7, #32
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 fbd1 	bl	80022d4 <HAL_RCC_OscConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b38:	f000 f820 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b40:	2302      	movs	r3, #2
 8000b42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b48:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	2103      	movs	r1, #3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 fe32 	bl	80027c4 <HAL_RCC_ClockConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b66:	f000 f809 	bl	8000b7c <Error_Handler>
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	3750      	adds	r7, #80	@ 0x50
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40007000 	.word	0x40007000

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <Error_Handler+0x8>

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b96:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb2:	4a08      	ldr	r2, [pc, #32]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bba:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <NMI_Handler+0x4>

08000be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <MemManage_Handler+0x4>

08000bf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <UsageFault_Handler+0x4>

08000c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2e:	f000 f979 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c3c:	4802      	ldr	r0, [pc, #8]	@ (8000c48 <CAN1_RX0_IRQHandler+0x10>)
 8000c3e:	f000 fe20 	bl	8001882 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000030 	.word	0x20000030

08000c4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c50:	4802      	ldr	r0, [pc, #8]	@ (8000c5c <TIM3_IRQHandler+0x10>)
 8000c52:	f001 fff2 	bl	8002c3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000058 	.word	0x20000058

08000c60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c64:	4802      	ldr	r0, [pc, #8]	@ (8000c70 <TIM6_DAC_IRQHandler+0x10>)
 8000c66:	f001 ffe8 	bl	8002c3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200000a0 	.word	0x200000a0

08000c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cac:	463b      	mov	r3, r7
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <MX_TIM3_Init+0x94>)
 8000cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d30 <MX_TIM3_Init+0x98>)
 8000cb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4999;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	@ (8000d2c <MX_TIM3_Init+0x94>)
 8000cbc:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000cc0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <MX_TIM3_Init+0x94>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <MX_TIM3_Init+0x94>)
 8000cca:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000cce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	@ (8000d2c <MX_TIM3_Init+0x94>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <MX_TIM3_Init+0x94>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cdc:	4813      	ldr	r0, [pc, #76]	@ (8000d2c <MX_TIM3_Init+0x94>)
 8000cde:	f001 ff5d 	bl	8002b9c <HAL_TIM_Base_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ce8:	f7ff ff48 	bl	8000b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cf2:	f107 0308 	add.w	r3, r7, #8
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480c      	ldr	r0, [pc, #48]	@ (8000d2c <MX_TIM3_Init+0x94>)
 8000cfa:	f002 f88e 	bl	8002e1a <HAL_TIM_ConfigClockSource>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d04:	f7ff ff3a 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d10:	463b      	mov	r3, r7
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <MX_TIM3_Init+0x94>)
 8000d16:	f002 fab9 	bl	800328c <HAL_TIMEx_MasterConfigSynchronization>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d20:	f7ff ff2c 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000058 	.word	0x20000058
 8000d30:	40000400 	.word	0x40000400

08000d34 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <MX_TIM6_Init+0x64>)
 8000d44:	4a15      	ldr	r2, [pc, #84]	@ (8000d9c <MX_TIM6_Init+0x68>)
 8000d46:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4999;
 8000d48:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <MX_TIM6_Init+0x64>)
 8000d4a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000d4e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d50:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <MX_TIM6_Init+0x64>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <MX_TIM6_Init+0x64>)
 8000d58:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000d5c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <MX_TIM6_Init+0x64>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d64:	480c      	ldr	r0, [pc, #48]	@ (8000d98 <MX_TIM6_Init+0x64>)
 8000d66:	f001 ff19 	bl	8002b9c <HAL_TIM_Base_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d70:	f7ff ff04 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d74:	2300      	movs	r3, #0
 8000d76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <MX_TIM6_Init+0x64>)
 8000d82:	f002 fa83 	bl	800328c <HAL_TIMEx_MasterConfigSynchronization>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d8c:	f7ff fef6 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	200000a0 	.word	0x200000a0
 8000d9c:	40001000 	.word	0x40001000

08000da0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a1c      	ldr	r2, [pc, #112]	@ (8000e20 <HAL_TIM_Base_MspInit+0x80>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d116      	bne.n	8000de0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e24 <HAL_TIM_Base_MspInit+0x84>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	4a1a      	ldr	r2, [pc, #104]	@ (8000e24 <HAL_TIM_Base_MspInit+0x84>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc2:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <HAL_TIM_Base_MspInit+0x84>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	201d      	movs	r0, #29
 8000dd4:	f001 f85f 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000dd8:	201d      	movs	r0, #29
 8000dda:	f001 f878 	bl	8001ece <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000dde:	e01a      	b.n	8000e16 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM6)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a10      	ldr	r2, [pc, #64]	@ (8000e28 <HAL_TIM_Base_MspInit+0x88>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d115      	bne.n	8000e16 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <HAL_TIM_Base_MspInit+0x84>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	4a0c      	ldr	r2, [pc, #48]	@ (8000e24 <HAL_TIM_Base_MspInit+0x84>)
 8000df4:	f043 0310 	orr.w	r3, r3, #16
 8000df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_TIM_Base_MspInit+0x84>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	f003 0310 	and.w	r3, r3, #16
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2036      	movs	r0, #54	@ 0x36
 8000e0c:	f001 f843 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e10:	2036      	movs	r0, #54	@ 0x36
 8000e12:	f001 f85c 	bl	8001ece <HAL_NVIC_EnableIRQ>
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40000400 	.word	0x40000400
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40001000 	.word	0x40001000

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e30:	f7ff ff20 	bl	8000c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e34:	480c      	ldr	r0, [pc, #48]	@ (8000e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e36:	490d      	ldr	r1, [pc, #52]	@ (8000e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e38:	4a0d      	ldr	r2, [pc, #52]	@ (8000e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f002 fe7b 	bl	8003b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fdeb 	bl	8000a38 <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e70:	08003bd4 	.word	0x08003bd4
  ldr r2, =_sbss
 8000e74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e78:	2000012c 	.word	0x2000012c

08000e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec0 <HAL_Init+0x40>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <HAL_Init+0x40>)
 8000e96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	@ (8000ec0 <HAL_Init+0x40>)
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 ffe9 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	200f      	movs	r0, #15
 8000eb0:	f000 f808 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff fe68 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023c00 	.word	0x40023c00

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_InitTick+0x54>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_InitTick+0x58>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 f801 	bl	8001eea <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f000 ffc9 	bl	8001e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	@ (8000f20 <HAL_InitTick+0x5c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008
 8000f48:	200000e8 	.word	0x200000e8

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	@ (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	200000e8 	.word	0x200000e8

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff ffee 	bl	8000f4c <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <HAL_Delay+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8a:	bf00      	nop
 8000f8c:	f7ff ffde 	bl	8000f4c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008

08000fac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e0ed      	b.n	800119a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d102      	bne.n	8000fd0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fbc2 	bl	8000754 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f042 0201 	orr.w	r2, r2, #1
 8000fde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fe0:	f7ff ffb4 	bl	8000f4c <HAL_GetTick>
 8000fe4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fe6:	e012      	b.n	800100e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fe8:	f7ff ffb0 	bl	8000f4c <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b0a      	cmp	r3, #10
 8000ff4:	d90b      	bls.n	800100e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ffa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2205      	movs	r2, #5
 8001006:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e0c5      	b.n	800119a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0e5      	beq.n	8000fe8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0202 	bic.w	r2, r2, #2
 800102a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800102c:	f7ff ff8e 	bl	8000f4c <HAL_GetTick>
 8001030:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001032:	e012      	b.n	800105a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001034:	f7ff ff8a 	bl	8000f4c <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b0a      	cmp	r3, #10
 8001040:	d90b      	bls.n	800105a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001046:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2205      	movs	r2, #5
 8001052:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e09f      	b.n	800119a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1e5      	bne.n	8001034 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7e1b      	ldrb	r3, [r3, #24]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d108      	bne.n	8001082 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	e007      	b.n	8001092 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001090:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7e5b      	ldrb	r3, [r3, #25]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d108      	bne.n	80010ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e007      	b.n	80010bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7e9b      	ldrb	r3, [r3, #26]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d108      	bne.n	80010d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f042 0220 	orr.w	r2, r2, #32
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e007      	b.n	80010e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0220 	bic.w	r2, r2, #32
 80010e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7edb      	ldrb	r3, [r3, #27]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d108      	bne.n	8001100 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 0210 	bic.w	r2, r2, #16
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	e007      	b.n	8001110 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0210 	orr.w	r2, r2, #16
 800110e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7f1b      	ldrb	r3, [r3, #28]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d108      	bne.n	800112a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0208 	orr.w	r2, r2, #8
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	e007      	b.n	800113a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0208 	bic.w	r2, r2, #8
 8001138:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7f5b      	ldrb	r3, [r3, #29]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d108      	bne.n	8001154 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 0204 	orr.w	r2, r2, #4
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	e007      	b.n	8001164 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0204 	bic.w	r2, r2, #4
 8001162:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	431a      	orrs	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	ea42 0103 	orr.w	r1, r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	1e5a      	subs	r2, r3, #1
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	430a      	orrs	r2, r1
 8001188:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2201      	movs	r2, #1
 8001194:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011b4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d003      	beq.n	80011c4 <HAL_CAN_ConfigFilter+0x20>
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
 80011be:	2b02      	cmp	r3, #2
 80011c0:	f040 80be 	bne.w	8001340 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80011c4:	4b65      	ldr	r3, [pc, #404]	@ (800135c <HAL_CAN_ConfigFilter+0x1b8>)
 80011c6:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80011ce:	f043 0201 	orr.w	r2, r3, #1
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80011de:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	431a      	orrs	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f003 031f 	and.w	r3, r3, #31
 8001204:	2201      	movs	r2, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43db      	mvns	r3, r3
 8001216:	401a      	ands	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d123      	bne.n	800126e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	43db      	mvns	r3, r3
 8001230:	401a      	ands	r2, r3
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001248:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	3248      	adds	r2, #72	@ 0x48
 800124e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001262:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001264:	6939      	ldr	r1, [r7, #16]
 8001266:	3348      	adds	r3, #72	@ 0x48
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	440b      	add	r3, r1
 800126c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d122      	bne.n	80012bc <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	431a      	orrs	r2, r3
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001296:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	3248      	adds	r2, #72	@ 0x48
 800129c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012b2:	6939      	ldr	r1, [r7, #16]
 80012b4:	3348      	adds	r3, #72	@ 0x48
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	440b      	add	r3, r1
 80012ba:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d109      	bne.n	80012d8 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	401a      	ands	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80012d6:	e007      	b.n	80012e8 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	431a      	orrs	r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d109      	bne.n	8001304 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	401a      	ands	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001302:	e007      	b.n	8001314 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	431a      	orrs	r2, r3
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d107      	bne.n	800132c <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	431a      	orrs	r2, r3
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001332:	f023 0201 	bic.w	r2, r3, #1
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	e006      	b.n	800134e <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001344:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
  }
}
 800134e:	4618      	mov	r0, r3
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40006400 	.word	0x40006400

08001360 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b01      	cmp	r3, #1
 8001372:	d12e      	bne.n	80013d2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2202      	movs	r2, #2
 8001378:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0201 	bic.w	r2, r2, #1
 800138a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800138c:	f7ff fdde 	bl	8000f4c <HAL_GetTick>
 8001390:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001392:	e012      	b.n	80013ba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001394:	f7ff fdda 	bl	8000f4c <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b0a      	cmp	r3, #10
 80013a0:	d90b      	bls.n	80013ba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2205      	movs	r2, #5
 80013b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e012      	b.n	80013e0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1e5      	bne.n	8001394 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e006      	b.n	80013e0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
  }
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	@ 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013fc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001406:	7ffb      	ldrb	r3, [r7, #31]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d003      	beq.n	8001414 <HAL_CAN_AddTxMessage+0x2c>
 800140c:	7ffb      	ldrb	r3, [r7, #31]
 800140e:	2b02      	cmp	r3, #2
 8001410:	f040 80ad 	bne.w	800156e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10a      	bne.n	8001434 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001424:	2b00      	cmp	r3, #0
 8001426:	d105      	bne.n	8001434 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8095 	beq.w	800155e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	0e1b      	lsrs	r3, r3, #24
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800143e:	2201      	movs	r2, #1
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d10d      	bne.n	800146c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800145a:	68f9      	ldr	r1, [r7, #12]
 800145c:	6809      	ldr	r1, [r1, #0]
 800145e:	431a      	orrs	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3318      	adds	r3, #24
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	440b      	add	r3, r1
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	e00f      	b.n	800148c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001476:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800147c:	68f9      	ldr	r1, [r7, #12]
 800147e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001480:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	3318      	adds	r3, #24
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	440b      	add	r3, r1
 800148a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6819      	ldr	r1, [r3, #0]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	3318      	adds	r3, #24
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	440b      	add	r3, r1
 800149c:	3304      	adds	r3, #4
 800149e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	7d1b      	ldrb	r3, [r3, #20]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d111      	bne.n	80014cc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	3318      	adds	r3, #24
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	4413      	add	r3, r2
 80014b4:	3304      	adds	r3, #4
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	6811      	ldr	r1, [r2, #0]
 80014bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	3318      	adds	r3, #24
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	440b      	add	r3, r1
 80014c8:	3304      	adds	r3, #4
 80014ca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3307      	adds	r3, #7
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	061a      	lsls	r2, r3, #24
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3306      	adds	r3, #6
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	041b      	lsls	r3, r3, #16
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3305      	adds	r3, #5
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	4313      	orrs	r3, r2
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	3204      	adds	r2, #4
 80014ec:	7812      	ldrb	r2, [r2, #0]
 80014ee:	4610      	mov	r0, r2
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	6811      	ldr	r1, [r2, #0]
 80014f4:	ea43 0200 	orr.w	r2, r3, r0
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	440b      	add	r3, r1
 80014fe:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001502:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3303      	adds	r3, #3
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	061a      	lsls	r2, r3, #24
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3302      	adds	r3, #2
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	041b      	lsls	r3, r3, #16
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3301      	adds	r3, #1
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	4313      	orrs	r3, r2
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	7812      	ldrb	r2, [r2, #0]
 8001524:	4610      	mov	r0, r2
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	6811      	ldr	r1, [r2, #0]
 800152a:	ea43 0200 	orr.w	r2, r3, r0
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	440b      	add	r3, r1
 8001534:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001538:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3318      	adds	r3, #24
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	4413      	add	r3, r2
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	6811      	ldr	r1, [r2, #0]
 800154c:	f043 0201 	orr.w	r2, r3, #1
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3318      	adds	r3, #24
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	440b      	add	r3, r1
 8001558:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e00e      	b.n	800157c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001562:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e006      	b.n	800157c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001572:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
  }
}
 800157c:	4618      	mov	r0, r3
 800157e:	3724      	adds	r7, #36	@ 0x24
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800159a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800159c:	7afb      	ldrb	r3, [r7, #11]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d002      	beq.n	80015a8 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80015a2:	7afb      	ldrb	r3, [r7, #11]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d11d      	bne.n	80015e4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3301      	adds	r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3301      	adds	r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3301      	adds	r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80015e4:	68fb      	ldr	r3, [r7, #12]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80015f2:	b480      	push	{r7}
 80015f4:	b087      	sub	sp, #28
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001606:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d003      	beq.n	8001616 <HAL_CAN_GetRxMessage+0x24>
 800160e:	7dfb      	ldrb	r3, [r7, #23]
 8001610:	2b02      	cmp	r3, #2
 8001612:	f040 8103 	bne.w	800181c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10e      	bne.n	800163a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d116      	bne.n	8001658 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e0f7      	b.n	800182a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d107      	bne.n	8001658 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0e8      	b.n	800182a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	331b      	adds	r3, #27
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	4413      	add	r3, r2
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0204 	and.w	r2, r3, #4
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10c      	bne.n	8001690 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	331b      	adds	r3, #27
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	4413      	add	r3, r2
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	0d5b      	lsrs	r3, r3, #21
 8001686:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e00b      	b.n	80016a8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	331b      	adds	r3, #27
 8001698:	011b      	lsls	r3, r3, #4
 800169a:	4413      	add	r3, r2
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	08db      	lsrs	r3, r3, #3
 80016a0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	331b      	adds	r3, #27
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	4413      	add	r3, r2
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0202 	and.w	r2, r3, #2
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	331b      	adds	r3, #27
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	4413      	add	r3, r2
 80016ca:	3304      	adds	r3, #4
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2208      	movs	r2, #8
 80016da:	611a      	str	r2, [r3, #16]
 80016dc:	e00b      	b.n	80016f6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	331b      	adds	r3, #27
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	4413      	add	r3, r2
 80016ea:	3304      	adds	r3, #4
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 020f 	and.w	r2, r3, #15
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	331b      	adds	r3, #27
 80016fe:	011b      	lsls	r3, r3, #4
 8001700:	4413      	add	r3, r2
 8001702:	3304      	adds	r3, #4
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	b2da      	uxtb	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	331b      	adds	r3, #27
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	4413      	add	r3, r2
 800171a:	3304      	adds	r3, #4
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	0c1b      	lsrs	r3, r3, #16
 8001720:	b29a      	uxth	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	4413      	add	r3, r2
 8001730:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	4413      	add	r3, r2
 8001746:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	0a1a      	lsrs	r2, r3, #8
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	3301      	adds	r3, #1
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	4413      	add	r3, r2
 8001760:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	0c1a      	lsrs	r2, r3, #16
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	3302      	adds	r3, #2
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	4413      	add	r3, r2
 800177a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	0e1a      	lsrs	r2, r3, #24
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	3303      	adds	r3, #3
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	011b      	lsls	r3, r3, #4
 8001792:	4413      	add	r3, r2
 8001794:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	3304      	adds	r3, #4
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	4413      	add	r3, r2
 80017ac:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	0a1a      	lsrs	r2, r3, #8
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	3305      	adds	r3, #5
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	4413      	add	r3, r2
 80017c6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0c1a      	lsrs	r2, r3, #16
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	3306      	adds	r3, #6
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	4413      	add	r3, r2
 80017e0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	0e1a      	lsrs	r2, r3, #24
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	3307      	adds	r3, #7
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d108      	bne.n	8001808 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f042 0220 	orr.w	r2, r2, #32
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	e007      	b.n	8001818 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691a      	ldr	r2, [r3, #16]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0220 	orr.w	r2, r2, #32
 8001816:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	e006      	b.n	800182a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001820:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
  }
}
 800182a:	4618      	mov	r0, r3
 800182c:	371c      	adds	r7, #28
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001836:	b480      	push	{r7}
 8001838:	b085      	sub	sp, #20
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001846:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d002      	beq.n	8001854 <HAL_CAN_ActivateNotification+0x1e>
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d109      	bne.n	8001868 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6959      	ldr	r1, [r3, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	e006      	b.n	8001876 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
  }
}
 8001876:	4618      	mov	r0, r3
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b08a      	sub	sp, #40	@ 0x28
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d07c      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d023      	beq.n	800191a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2201      	movs	r2, #1
 80018d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f983 	bl	8001bf0 <HAL_CAN_TxMailbox0CompleteCallback>
 80018ea:	e016      	b.n	800191a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d004      	beq.n	8001900 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80018fe:	e00c      	b.n	800191a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
 8001912:	e002      	b.n	800191a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f989 	bl	8001c2c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001920:	2b00      	cmp	r3, #0
 8001922:	d024      	beq.n	800196e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800192c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f963 	bl	8001c04 <HAL_CAN_TxMailbox1CompleteCallback>
 800193e:	e016      	b.n	800196e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
 8001952:	e00c      	b.n	800196e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001964:	627b      	str	r3, [r7, #36]	@ 0x24
 8001966:	e002      	b.n	800196e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f969 	bl	8001c40 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d024      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001980:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f943 	bl	8001c18 <HAL_CAN_TxMailbox2CompleteCallback>
 8001992:	e016      	b.n	80019c2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019a6:	e00c      	b.n	80019c2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80019b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ba:	e002      	b.n	80019c2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f949 	bl	8001c54 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00c      	beq.n	80019e6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019dc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2210      	movs	r2, #16
 80019e4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00b      	beq.n	8001a08 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d006      	beq.n	8001a08 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2208      	movs	r2, #8
 8001a00:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f930 	bl	8001c68 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d009      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7fe fee7 	bl	80007f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00c      	beq.n	8001a4a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a40:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2210      	movs	r2, #16
 8001a48:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	f003 0320 	and.w	r3, r3, #32
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00b      	beq.n	8001a6c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d006      	beq.n	8001a6c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2208      	movs	r2, #8
 8001a64:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f912 	bl	8001c90 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d009      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d002      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f8f9 	bl	8001c7c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00b      	beq.n	8001aac <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2210      	movs	r2, #16
 8001aa4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f8fc 	bl	8001ca4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00b      	beq.n	8001ace <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f8f5 	bl	8001cb8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d07b      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d072      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d043      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d03e      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b50:	2b60      	cmp	r3, #96	@ 0x60
 8001b52:	d02b      	beq.n	8001bac <HAL_CAN_IRQHandler+0x32a>
 8001b54:	2b60      	cmp	r3, #96	@ 0x60
 8001b56:	d82e      	bhi.n	8001bb6 <HAL_CAN_IRQHandler+0x334>
 8001b58:	2b50      	cmp	r3, #80	@ 0x50
 8001b5a:	d022      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x320>
 8001b5c:	2b50      	cmp	r3, #80	@ 0x50
 8001b5e:	d82a      	bhi.n	8001bb6 <HAL_CAN_IRQHandler+0x334>
 8001b60:	2b40      	cmp	r3, #64	@ 0x40
 8001b62:	d019      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x316>
 8001b64:	2b40      	cmp	r3, #64	@ 0x40
 8001b66:	d826      	bhi.n	8001bb6 <HAL_CAN_IRQHandler+0x334>
 8001b68:	2b30      	cmp	r3, #48	@ 0x30
 8001b6a:	d010      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x30c>
 8001b6c:	2b30      	cmp	r3, #48	@ 0x30
 8001b6e:	d822      	bhi.n	8001bb6 <HAL_CAN_IRQHandler+0x334>
 8001b70:	2b10      	cmp	r3, #16
 8001b72:	d002      	beq.n	8001b7a <HAL_CAN_IRQHandler+0x2f8>
 8001b74:	2b20      	cmp	r3, #32
 8001b76:	d005      	beq.n	8001b84 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b78:	e01d      	b.n	8001bb6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b82:	e019      	b.n	8001bb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b86:	f043 0310 	orr.w	r3, r3, #16
 8001b8a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b8c:	e014      	b.n	8001bb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b90:	f043 0320 	orr.w	r3, r3, #32
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b96:	e00f      	b.n	8001bb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ba0:	e00a      	b.n	8001bb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ba8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001baa:	e005      	b.n	8001bb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bb2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bb4:	e000      	b.n	8001bb8 <HAL_CAN_IRQHandler+0x336>
            break;
 8001bb6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699a      	ldr	r2, [r3, #24]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001bc6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2204      	movs	r2, #4
 8001bce:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d008      	beq.n	8001be8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f872 	bl	8001ccc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001be8:	bf00      	nop
 8001bea:	3728      	adds	r7, #40	@ 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d12:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	60d3      	str	r3, [r2, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	@ (8001d40 <__NVIC_GetPriorityGrouping+0x18>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 0307 	and.w	r3, r3, #7
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	db0b      	blt.n	8001d6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	4907      	ldr	r1, [pc, #28]	@ (8001d7c <__NVIC_EnableIRQ+0x38>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	2001      	movs	r0, #1
 8001d66:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000e100 	.word	0xe000e100

08001d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	db0a      	blt.n	8001daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	490c      	ldr	r1, [pc, #48]	@ (8001dcc <__NVIC_SetPriority+0x4c>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	0112      	lsls	r2, r2, #4
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	440b      	add	r3, r1
 8001da4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da8:	e00a      	b.n	8001dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4908      	ldr	r1, [pc, #32]	@ (8001dd0 <__NVIC_SetPriority+0x50>)
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	3b04      	subs	r3, #4
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	761a      	strb	r2, [r3, #24]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000e100 	.word	0xe000e100
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	@ 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f1c3 0307 	rsb	r3, r3, #7
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	bf28      	it	cs
 8001df2:	2304      	movcs	r3, #4
 8001df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d902      	bls.n	8001e04 <NVIC_EncodePriority+0x30>
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3b03      	subs	r3, #3
 8001e02:	e000      	b.n	8001e06 <NVIC_EncodePriority+0x32>
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	4313      	orrs	r3, r2
         );
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3724      	adds	r7, #36	@ 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f7ff ff8e 	bl	8001d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	@ (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff29 	bl	8001ce0 <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea8:	f7ff ff3e 	bl	8001d28 <__NVIC_GetPriorityGrouping>
 8001eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff8e 	bl	8001dd4 <NVIC_EncodePriority>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff5d 	bl	8001d80 <__NVIC_SetPriority>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff31 	bl	8001d44 <__NVIC_EnableIRQ>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffa2 	bl	8001e3c <SysTick_Config>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	@ 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	e16b      	b.n	80021f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f20:	2201      	movs	r2, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	f040 815a 	bne.w	80021f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d005      	beq.n	8001f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d130      	bne.n	8001fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	2203      	movs	r2, #3
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 0201 	and.w	r2, r3, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d017      	beq.n	8001ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d123      	bne.n	8002048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	08da      	lsrs	r2, r3, #3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3208      	adds	r2, #8
 8002008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	220f      	movs	r2, #15
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	08da      	lsrs	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3208      	adds	r2, #8
 8002042:	69b9      	ldr	r1, [r7, #24]
 8002044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	2203      	movs	r2, #3
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0203 	and.w	r2, r3, #3
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80b4 	beq.w	80021f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b60      	ldr	r3, [pc, #384]	@ (8002210 <HAL_GPIO_Init+0x30c>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002092:	4a5f      	ldr	r2, [pc, #380]	@ (8002210 <HAL_GPIO_Init+0x30c>)
 8002094:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002098:	6453      	str	r3, [r2, #68]	@ 0x44
 800209a:	4b5d      	ldr	r3, [pc, #372]	@ (8002210 <HAL_GPIO_Init+0x30c>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020a6:	4a5b      	ldr	r2, [pc, #364]	@ (8002214 <HAL_GPIO_Init+0x310>)
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	3302      	adds	r3, #2
 80020ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	220f      	movs	r2, #15
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a52      	ldr	r2, [pc, #328]	@ (8002218 <HAL_GPIO_Init+0x314>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d02b      	beq.n	800212a <HAL_GPIO_Init+0x226>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a51      	ldr	r2, [pc, #324]	@ (800221c <HAL_GPIO_Init+0x318>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d025      	beq.n	8002126 <HAL_GPIO_Init+0x222>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a50      	ldr	r2, [pc, #320]	@ (8002220 <HAL_GPIO_Init+0x31c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d01f      	beq.n	8002122 <HAL_GPIO_Init+0x21e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002224 <HAL_GPIO_Init+0x320>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d019      	beq.n	800211e <HAL_GPIO_Init+0x21a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002228 <HAL_GPIO_Init+0x324>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d013      	beq.n	800211a <HAL_GPIO_Init+0x216>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a4d      	ldr	r2, [pc, #308]	@ (800222c <HAL_GPIO_Init+0x328>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d00d      	beq.n	8002116 <HAL_GPIO_Init+0x212>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002230 <HAL_GPIO_Init+0x32c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d007      	beq.n	8002112 <HAL_GPIO_Init+0x20e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4b      	ldr	r2, [pc, #300]	@ (8002234 <HAL_GPIO_Init+0x330>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d101      	bne.n	800210e <HAL_GPIO_Init+0x20a>
 800210a:	2307      	movs	r3, #7
 800210c:	e00e      	b.n	800212c <HAL_GPIO_Init+0x228>
 800210e:	2308      	movs	r3, #8
 8002110:	e00c      	b.n	800212c <HAL_GPIO_Init+0x228>
 8002112:	2306      	movs	r3, #6
 8002114:	e00a      	b.n	800212c <HAL_GPIO_Init+0x228>
 8002116:	2305      	movs	r3, #5
 8002118:	e008      	b.n	800212c <HAL_GPIO_Init+0x228>
 800211a:	2304      	movs	r3, #4
 800211c:	e006      	b.n	800212c <HAL_GPIO_Init+0x228>
 800211e:	2303      	movs	r3, #3
 8002120:	e004      	b.n	800212c <HAL_GPIO_Init+0x228>
 8002122:	2302      	movs	r3, #2
 8002124:	e002      	b.n	800212c <HAL_GPIO_Init+0x228>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_GPIO_Init+0x228>
 800212a:	2300      	movs	r3, #0
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	f002 0203 	and.w	r2, r2, #3
 8002132:	0092      	lsls	r2, r2, #2
 8002134:	4093      	lsls	r3, r2
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800213c:	4935      	ldr	r1, [pc, #212]	@ (8002214 <HAL_GPIO_Init+0x310>)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	3302      	adds	r3, #2
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800214a:	4b3b      	ldr	r3, [pc, #236]	@ (8002238 <HAL_GPIO_Init+0x334>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800216e:	4a32      	ldr	r2, [pc, #200]	@ (8002238 <HAL_GPIO_Init+0x334>)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002174:	4b30      	ldr	r3, [pc, #192]	@ (8002238 <HAL_GPIO_Init+0x334>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002198:	4a27      	ldr	r2, [pc, #156]	@ (8002238 <HAL_GPIO_Init+0x334>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800219e:	4b26      	ldr	r3, [pc, #152]	@ (8002238 <HAL_GPIO_Init+0x334>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002238 <HAL_GPIO_Init+0x334>)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002238 <HAL_GPIO_Init+0x334>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ec:	4a12      	ldr	r2, [pc, #72]	@ (8002238 <HAL_GPIO_Init+0x334>)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3301      	adds	r3, #1
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b0f      	cmp	r3, #15
 80021fc:	f67f ae90 	bls.w	8001f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	3724      	adds	r7, #36	@ 0x24
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800
 8002214:	40013800 	.word	0x40013800
 8002218:	40020000 	.word	0x40020000
 800221c:	40020400 	.word	0x40020400
 8002220:	40020800 	.word	0x40020800
 8002224:	40020c00 	.word	0x40020c00
 8002228:	40021000 	.word	0x40021000
 800222c:	40021400 	.word	0x40021400
 8002230:	40021800 	.word	0x40021800
 8002234:	40021c00 	.word	0x40021c00
 8002238:	40013c00 	.word	0x40013c00

0800223c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	887b      	ldrh	r3, [r7, #2]
 800224e:	4013      	ands	r3, r2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
 8002258:	e001      	b.n	800225e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800225e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	807b      	strh	r3, [r7, #2]
 8002278:	4613      	mov	r3, r2
 800227a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800227c:	787b      	ldrb	r3, [r7, #1]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002282:	887a      	ldrh	r2, [r7, #2]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002288:	e003      	b.n	8002292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800228a:	887b      	ldrh	r3, [r7, #2]
 800228c:	041a      	lsls	r2, r3, #16
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	619a      	str	r2, [r3, #24]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800229e:	b480      	push	{r7}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	460b      	mov	r3, r1
 80022a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022b0:	887a      	ldrh	r2, [r7, #2]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4013      	ands	r3, r2
 80022b6:	041a      	lsls	r2, r3, #16
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	43d9      	mvns	r1, r3
 80022bc:	887b      	ldrh	r3, [r7, #2]
 80022be:	400b      	ands	r3, r1
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	619a      	str	r2, [r3, #24]
}
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e267      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d075      	beq.n	80023de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022f2:	4b88      	ldr	r3, [pc, #544]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d00c      	beq.n	8002318 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022fe:	4b85      	ldr	r3, [pc, #532]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002306:	2b08      	cmp	r3, #8
 8002308:	d112      	bne.n	8002330 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230a:	4b82      	ldr	r3, [pc, #520]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002312:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002316:	d10b      	bne.n	8002330 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	4b7e      	ldr	r3, [pc, #504]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d05b      	beq.n	80023dc <HAL_RCC_OscConfig+0x108>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d157      	bne.n	80023dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e242      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002338:	d106      	bne.n	8002348 <HAL_RCC_OscConfig+0x74>
 800233a:	4b76      	ldr	r3, [pc, #472]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a75      	ldr	r2, [pc, #468]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e01d      	b.n	8002384 <HAL_RCC_OscConfig+0xb0>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002350:	d10c      	bne.n	800236c <HAL_RCC_OscConfig+0x98>
 8002352:	4b70      	ldr	r3, [pc, #448]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a6f      	ldr	r2, [pc, #444]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	4b6d      	ldr	r3, [pc, #436]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a6c      	ldr	r2, [pc, #432]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e00b      	b.n	8002384 <HAL_RCC_OscConfig+0xb0>
 800236c:	4b69      	ldr	r3, [pc, #420]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a68      	ldr	r2, [pc, #416]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b66      	ldr	r3, [pc, #408]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a65      	ldr	r2, [pc, #404]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 800237e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d013      	beq.n	80023b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7fe fdde 	bl	8000f4c <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002394:	f7fe fdda 	bl	8000f4c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	@ 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e207      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0xc0>
 80023b2:	e014      	b.n	80023de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7fe fdca 	bl	8000f4c <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023bc:	f7fe fdc6 	bl	8000f4c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	@ 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e1f3      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	4b51      	ldr	r3, [pc, #324]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0xe8>
 80023da:	e000      	b.n	80023de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d063      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f6:	4b47      	ldr	r3, [pc, #284]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d11c      	bne.n	800243c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002402:	4b44      	ldr	r3, [pc, #272]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d116      	bne.n	800243c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240e:	4b41      	ldr	r3, [pc, #260]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_RCC_OscConfig+0x152>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d001      	beq.n	8002426 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e1c7      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002426:	4b3b      	ldr	r3, [pc, #236]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4937      	ldr	r1, [pc, #220]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243a:	e03a      	b.n	80024b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d020      	beq.n	8002486 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002444:	4b34      	ldr	r3, [pc, #208]	@ (8002518 <HAL_RCC_OscConfig+0x244>)
 8002446:	2201      	movs	r2, #1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe fd7f 	bl	8000f4c <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002452:	f7fe fd7b 	bl	8000f4c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e1a8      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002464:	4b2b      	ldr	r3, [pc, #172]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002470:	4b28      	ldr	r3, [pc, #160]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4925      	ldr	r1, [pc, #148]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002480:	4313      	orrs	r3, r2
 8002482:	600b      	str	r3, [r1, #0]
 8002484:	e015      	b.n	80024b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002486:	4b24      	ldr	r3, [pc, #144]	@ (8002518 <HAL_RCC_OscConfig+0x244>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7fe fd5e 	bl	8000f4c <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002494:	f7fe fd5a 	bl	8000f4c <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e187      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d036      	beq.n	800252c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d016      	beq.n	80024f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <HAL_RCC_OscConfig+0x248>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7fe fd3e 	bl	8000f4c <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d4:	f7fe fd3a 	bl	8000f4c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e167      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 80024e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x200>
 80024f2:	e01b      	b.n	800252c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f4:	4b09      	ldr	r3, [pc, #36]	@ (800251c <HAL_RCC_OscConfig+0x248>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fa:	f7fe fd27 	bl	8000f4c <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002500:	e00e      	b.n	8002520 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002502:	f7fe fd23 	bl	8000f4c <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d907      	bls.n	8002520 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e150      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
 8002514:	40023800 	.word	0x40023800
 8002518:	42470000 	.word	0x42470000
 800251c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	4b88      	ldr	r3, [pc, #544]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 8002522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1ea      	bne.n	8002502 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 8097 	beq.w	8002668 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253e:	4b81      	ldr	r3, [pc, #516]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10f      	bne.n	800256a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	4b7d      	ldr	r3, [pc, #500]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	4a7c      	ldr	r2, [pc, #496]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002558:	6413      	str	r3, [r2, #64]	@ 0x40
 800255a:	4b7a      	ldr	r3, [pc, #488]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002566:	2301      	movs	r3, #1
 8002568:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256a:	4b77      	ldr	r3, [pc, #476]	@ (8002748 <HAL_RCC_OscConfig+0x474>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d118      	bne.n	80025a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002576:	4b74      	ldr	r3, [pc, #464]	@ (8002748 <HAL_RCC_OscConfig+0x474>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a73      	ldr	r2, [pc, #460]	@ (8002748 <HAL_RCC_OscConfig+0x474>)
 800257c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002582:	f7fe fce3 	bl	8000f4c <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258a:	f7fe fcdf 	bl	8000f4c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e10c      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259c:	4b6a      	ldr	r3, [pc, #424]	@ (8002748 <HAL_RCC_OscConfig+0x474>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d106      	bne.n	80025be <HAL_RCC_OscConfig+0x2ea>
 80025b0:	4b64      	ldr	r3, [pc, #400]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b4:	4a63      	ldr	r2, [pc, #396]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80025bc:	e01c      	b.n	80025f8 <HAL_RCC_OscConfig+0x324>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x30c>
 80025c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ca:	4a5e      	ldr	r2, [pc, #376]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80025cc:	f043 0304 	orr.w	r3, r3, #4
 80025d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80025de:	e00b      	b.n	80025f8 <HAL_RCC_OscConfig+0x324>
 80025e0:	4b58      	ldr	r3, [pc, #352]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e4:	4a57      	ldr	r2, [pc, #348]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ec:	4b55      	ldr	r3, [pc, #340]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f0:	4a54      	ldr	r2, [pc, #336]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80025f2:	f023 0304 	bic.w	r3, r3, #4
 80025f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d015      	beq.n	800262c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7fe fca4 	bl	8000f4c <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002606:	e00a      	b.n	800261e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002608:	f7fe fca0 	bl	8000f4c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e0cb      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261e:	4b49      	ldr	r3, [pc, #292]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0ee      	beq.n	8002608 <HAL_RCC_OscConfig+0x334>
 800262a:	e014      	b.n	8002656 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262c:	f7fe fc8e 	bl	8000f4c <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002632:	e00a      	b.n	800264a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002634:	f7fe fc8a 	bl	8000f4c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e0b5      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264a:	4b3e      	ldr	r3, [pc, #248]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1ee      	bne.n	8002634 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002656:	7dfb      	ldrb	r3, [r7, #23]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d105      	bne.n	8002668 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265c:	4b39      	ldr	r3, [pc, #228]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 800265e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002660:	4a38      	ldr	r2, [pc, #224]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 8002662:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002666:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80a1 	beq.w	80027b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002672:	4b34      	ldr	r3, [pc, #208]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b08      	cmp	r3, #8
 800267c:	d05c      	beq.n	8002738 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d141      	bne.n	800270a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002686:	4b31      	ldr	r3, [pc, #196]	@ (800274c <HAL_RCC_OscConfig+0x478>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7fe fc5e 	bl	8000f4c <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002694:	f7fe fc5a 	bl	8000f4c <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e087      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a6:	4b27      	ldr	r3, [pc, #156]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	019b      	lsls	r3, r3, #6
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c8:	085b      	lsrs	r3, r3, #1
 80026ca:	3b01      	subs	r3, #1
 80026cc:	041b      	lsls	r3, r3, #16
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d4:	061b      	lsls	r3, r3, #24
 80026d6:	491b      	ldr	r1, [pc, #108]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026dc:	4b1b      	ldr	r3, [pc, #108]	@ (800274c <HAL_RCC_OscConfig+0x478>)
 80026de:	2201      	movs	r2, #1
 80026e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e2:	f7fe fc33 	bl	8000f4c <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ea:	f7fe fc2f 	bl	8000f4c <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e05c      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fc:	4b11      	ldr	r3, [pc, #68]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x416>
 8002708:	e054      	b.n	80027b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270a:	4b10      	ldr	r3, [pc, #64]	@ (800274c <HAL_RCC_OscConfig+0x478>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7fe fc1c 	bl	8000f4c <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002718:	f7fe fc18 	bl	8000f4c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e045      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272a:	4b06      	ldr	r3, [pc, #24]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x444>
 8002736:	e03d      	b.n	80027b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d107      	bne.n	8002750 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e038      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
 8002744:	40023800 	.word	0x40023800
 8002748:	40007000 	.word	0x40007000
 800274c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002750:	4b1b      	ldr	r3, [pc, #108]	@ (80027c0 <HAL_RCC_OscConfig+0x4ec>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d028      	beq.n	80027b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002768:	429a      	cmp	r2, r3
 800276a:	d121      	bne.n	80027b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002776:	429a      	cmp	r2, r3
 8002778:	d11a      	bne.n	80027b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002780:	4013      	ands	r3, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002786:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002788:	4293      	cmp	r3, r2
 800278a:	d111      	bne.n	80027b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002796:	085b      	lsrs	r3, r3, #1
 8002798:	3b01      	subs	r3, #1
 800279a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800279c:	429a      	cmp	r2, r3
 800279e:	d107      	bne.n	80027b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800

080027c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0cc      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027d8:	4b68      	ldr	r3, [pc, #416]	@ (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d90c      	bls.n	8002800 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e6:	4b65      	ldr	r3, [pc, #404]	@ (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	4b63      	ldr	r3, [pc, #396]	@ (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0b8      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d020      	beq.n	800284e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002818:	4b59      	ldr	r3, [pc, #356]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4a58      	ldr	r2, [pc, #352]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002822:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002830:	4b53      	ldr	r3, [pc, #332]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a52      	ldr	r2, [pc, #328]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800283a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800283c:	4b50      	ldr	r3, [pc, #320]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	494d      	ldr	r1, [pc, #308]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	4313      	orrs	r3, r2
 800284c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d044      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d107      	bne.n	8002872 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002862:	4b47      	ldr	r3, [pc, #284]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d119      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e07f      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d003      	beq.n	8002882 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800287e:	2b03      	cmp	r3, #3
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002882:	4b3f      	ldr	r3, [pc, #252]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e06f      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002892:	4b3b      	ldr	r3, [pc, #236]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e067      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a2:	4b37      	ldr	r3, [pc, #220]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f023 0203 	bic.w	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4934      	ldr	r1, [pc, #208]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b4:	f7fe fb4a 	bl	8000f4c <HAL_GetTick>
 80028b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028bc:	f7fe fb46 	bl	8000f4c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e04f      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 020c 	and.w	r2, r3, #12
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d1eb      	bne.n	80028bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028e4:	4b25      	ldr	r3, [pc, #148]	@ (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d20c      	bcs.n	800290c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b22      	ldr	r3, [pc, #136]	@ (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b20      	ldr	r3, [pc, #128]	@ (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e032      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002918:	4b19      	ldr	r3, [pc, #100]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4916      	ldr	r1, [pc, #88]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002936:	4b12      	ldr	r3, [pc, #72]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	490e      	ldr	r1, [pc, #56]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800294a:	f000 f821 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 800294e:	4602      	mov	r2, r0
 8002950:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	490a      	ldr	r1, [pc, #40]	@ (8002984 <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	5ccb      	ldrb	r3, [r1, r3]
 800295e:	fa22 f303 	lsr.w	r3, r2, r3
 8002962:	4a09      	ldr	r2, [pc, #36]	@ (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002966:	4b09      	ldr	r3, [pc, #36]	@ (800298c <HAL_RCC_ClockConfig+0x1c8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe faaa 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40023c00 	.word	0x40023c00
 8002980:	40023800 	.word	0x40023800
 8002984:	08003bb4 	.word	0x08003bb4
 8002988:	20000000 	.word	0x20000000
 800298c:	20000004 	.word	0x20000004

08002990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002994:	b094      	sub	sp, #80	@ 0x50
 8002996:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029a8:	4b79      	ldr	r3, [pc, #484]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0x200>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 030c 	and.w	r3, r3, #12
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d00d      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0x40>
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	f200 80e1 	bhi.w	8002b7c <HAL_RCC_GetSysClockFreq+0x1ec>
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x34>
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d003      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0x3a>
 80029c2:	e0db      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029c4:	4b73      	ldr	r3, [pc, #460]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0x204>)
 80029c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029c8:	e0db      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ca:	4b73      	ldr	r3, [pc, #460]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x208>)
 80029cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029ce:	e0d8      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0x200>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029da:	4b6d      	ldr	r3, [pc, #436]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0x200>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d063      	beq.n	8002aae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e6:	4b6a      	ldr	r3, [pc, #424]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	099b      	lsrs	r3, r3, #6
 80029ec:	2200      	movs	r2, #0
 80029ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80029f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80029fa:	2300      	movs	r3, #0
 80029fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80029fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a02:	4622      	mov	r2, r4
 8002a04:	462b      	mov	r3, r5
 8002a06:	f04f 0000 	mov.w	r0, #0
 8002a0a:	f04f 0100 	mov.w	r1, #0
 8002a0e:	0159      	lsls	r1, r3, #5
 8002a10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a14:	0150      	lsls	r0, r2, #5
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	1a51      	subs	r1, r2, r1
 8002a1e:	6139      	str	r1, [r7, #16]
 8002a20:	4629      	mov	r1, r5
 8002a22:	eb63 0301 	sbc.w	r3, r3, r1
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a34:	4659      	mov	r1, fp
 8002a36:	018b      	lsls	r3, r1, #6
 8002a38:	4651      	mov	r1, sl
 8002a3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a3e:	4651      	mov	r1, sl
 8002a40:	018a      	lsls	r2, r1, #6
 8002a42:	4651      	mov	r1, sl
 8002a44:	ebb2 0801 	subs.w	r8, r2, r1
 8002a48:	4659      	mov	r1, fp
 8002a4a:	eb63 0901 	sbc.w	r9, r3, r1
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a62:	4690      	mov	r8, r2
 8002a64:	4699      	mov	r9, r3
 8002a66:	4623      	mov	r3, r4
 8002a68:	eb18 0303 	adds.w	r3, r8, r3
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	462b      	mov	r3, r5
 8002a70:	eb49 0303 	adc.w	r3, r9, r3
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a82:	4629      	mov	r1, r5
 8002a84:	024b      	lsls	r3, r1, #9
 8002a86:	4621      	mov	r1, r4
 8002a88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a8c:	4621      	mov	r1, r4
 8002a8e:	024a      	lsls	r2, r1, #9
 8002a90:	4610      	mov	r0, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a96:	2200      	movs	r2, #0
 8002a98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002aa0:	f7fd fb92 	bl	80001c8 <__aeabi_uldivmod>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002aac:	e058      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aae:	4b38      	ldr	r3, [pc, #224]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	099b      	lsrs	r3, r3, #6
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	4611      	mov	r1, r2
 8002aba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002abe:	623b      	str	r3, [r7, #32]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ac8:	4642      	mov	r2, r8
 8002aca:	464b      	mov	r3, r9
 8002acc:	f04f 0000 	mov.w	r0, #0
 8002ad0:	f04f 0100 	mov.w	r1, #0
 8002ad4:	0159      	lsls	r1, r3, #5
 8002ad6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ada:	0150      	lsls	r0, r2, #5
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4641      	mov	r1, r8
 8002ae2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ae6:	4649      	mov	r1, r9
 8002ae8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002af8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002afc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b00:	ebb2 040a 	subs.w	r4, r2, sl
 8002b04:	eb63 050b 	sbc.w	r5, r3, fp
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	00eb      	lsls	r3, r5, #3
 8002b12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b16:	00e2      	lsls	r2, r4, #3
 8002b18:	4614      	mov	r4, r2
 8002b1a:	461d      	mov	r5, r3
 8002b1c:	4643      	mov	r3, r8
 8002b1e:	18e3      	adds	r3, r4, r3
 8002b20:	603b      	str	r3, [r7, #0]
 8002b22:	464b      	mov	r3, r9
 8002b24:	eb45 0303 	adc.w	r3, r5, r3
 8002b28:	607b      	str	r3, [r7, #4]
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b36:	4629      	mov	r1, r5
 8002b38:	028b      	lsls	r3, r1, #10
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b40:	4621      	mov	r1, r4
 8002b42:	028a      	lsls	r2, r1, #10
 8002b44:	4610      	mov	r0, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
 8002b4e:	61fa      	str	r2, [r7, #28]
 8002b50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b54:	f7fd fb38 	bl	80001c8 <__aeabi_uldivmod>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b60:	4b0b      	ldr	r3, [pc, #44]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	0c1b      	lsrs	r3, r3, #16
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002b70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b7a:	e002      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b7c:	4b05      	ldr	r3, [pc, #20]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3750      	adds	r7, #80	@ 0x50
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800
 8002b94:	00f42400 	.word	0x00f42400
 8002b98:	007a1200 	.word	0x007a1200

08002b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e041      	b.n	8002c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fe f8ec 	bl	8000da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4610      	mov	r0, r2
 8002bdc:	f000 fa16 	bl	800300c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d020      	beq.n	8002c9e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d01b      	beq.n	8002c9e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f06f 0202 	mvn.w	r2, #2
 8002c6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f9a3 	bl	8002fd0 <HAL_TIM_IC_CaptureCallback>
 8002c8a:	e005      	b.n	8002c98 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f995 	bl	8002fbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f9a6 	bl	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d020      	beq.n	8002cea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01b      	beq.n	8002cea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f06f 0204 	mvn.w	r2, #4
 8002cba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f97d 	bl	8002fd0 <HAL_TIM_IC_CaptureCallback>
 8002cd6:	e005      	b.n	8002ce4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f96f 	bl	8002fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f980 	bl	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d020      	beq.n	8002d36 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d01b      	beq.n	8002d36 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f06f 0208 	mvn.w	r2, #8
 8002d06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f957 	bl	8002fd0 <HAL_TIM_IC_CaptureCallback>
 8002d22:	e005      	b.n	8002d30 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f949 	bl	8002fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f95a 	bl	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d01b      	beq.n	8002d82 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f06f 0210 	mvn.w	r2, #16
 8002d52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2208      	movs	r2, #8
 8002d58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f931 	bl	8002fd0 <HAL_TIM_IC_CaptureCallback>
 8002d6e:	e005      	b.n	8002d7c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f923 	bl	8002fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f934 	bl	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00c      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d007      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f06f 0201 	mvn.w	r2, #1
 8002d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f901 	bl	8002fa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00c      	beq.n	8002dca <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fae7 	bl	8003398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00c      	beq.n	8002dee <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d007      	beq.n	8002dee <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f905 	bl	8002ff8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f003 0320 	and.w	r3, r3, #32
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00c      	beq.n	8002e12 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 0320 	and.w	r3, r3, #32
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f06f 0220 	mvn.w	r2, #32
 8002e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fab9 	bl	8003384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e12:	bf00      	nop
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_TIM_ConfigClockSource+0x1c>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e0b4      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x186>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2202      	movs	r2, #2
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e54:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e5c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e6e:	d03e      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0xd4>
 8002e70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e74:	f200 8087 	bhi.w	8002f86 <HAL_TIM_ConfigClockSource+0x16c>
 8002e78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e7c:	f000 8086 	beq.w	8002f8c <HAL_TIM_ConfigClockSource+0x172>
 8002e80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e84:	d87f      	bhi.n	8002f86 <HAL_TIM_ConfigClockSource+0x16c>
 8002e86:	2b70      	cmp	r3, #112	@ 0x70
 8002e88:	d01a      	beq.n	8002ec0 <HAL_TIM_ConfigClockSource+0xa6>
 8002e8a:	2b70      	cmp	r3, #112	@ 0x70
 8002e8c:	d87b      	bhi.n	8002f86 <HAL_TIM_ConfigClockSource+0x16c>
 8002e8e:	2b60      	cmp	r3, #96	@ 0x60
 8002e90:	d050      	beq.n	8002f34 <HAL_TIM_ConfigClockSource+0x11a>
 8002e92:	2b60      	cmp	r3, #96	@ 0x60
 8002e94:	d877      	bhi.n	8002f86 <HAL_TIM_ConfigClockSource+0x16c>
 8002e96:	2b50      	cmp	r3, #80	@ 0x50
 8002e98:	d03c      	beq.n	8002f14 <HAL_TIM_ConfigClockSource+0xfa>
 8002e9a:	2b50      	cmp	r3, #80	@ 0x50
 8002e9c:	d873      	bhi.n	8002f86 <HAL_TIM_ConfigClockSource+0x16c>
 8002e9e:	2b40      	cmp	r3, #64	@ 0x40
 8002ea0:	d058      	beq.n	8002f54 <HAL_TIM_ConfigClockSource+0x13a>
 8002ea2:	2b40      	cmp	r3, #64	@ 0x40
 8002ea4:	d86f      	bhi.n	8002f86 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea6:	2b30      	cmp	r3, #48	@ 0x30
 8002ea8:	d064      	beq.n	8002f74 <HAL_TIM_ConfigClockSource+0x15a>
 8002eaa:	2b30      	cmp	r3, #48	@ 0x30
 8002eac:	d86b      	bhi.n	8002f86 <HAL_TIM_ConfigClockSource+0x16c>
 8002eae:	2b20      	cmp	r3, #32
 8002eb0:	d060      	beq.n	8002f74 <HAL_TIM_ConfigClockSource+0x15a>
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	d867      	bhi.n	8002f86 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d05c      	beq.n	8002f74 <HAL_TIM_ConfigClockSource+0x15a>
 8002eba:	2b10      	cmp	r3, #16
 8002ebc:	d05a      	beq.n	8002f74 <HAL_TIM_ConfigClockSource+0x15a>
 8002ebe:	e062      	b.n	8002f86 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ed0:	f000 f9bc 	bl	800324c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ee2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	609a      	str	r2, [r3, #8]
      break;
 8002eec:	e04f      	b.n	8002f8e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002efe:	f000 f9a5 	bl	800324c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f10:	609a      	str	r2, [r3, #8]
      break;
 8002f12:	e03c      	b.n	8002f8e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f20:	461a      	mov	r2, r3
 8002f22:	f000 f919 	bl	8003158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2150      	movs	r1, #80	@ 0x50
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 f972 	bl	8003216 <TIM_ITRx_SetConfig>
      break;
 8002f32:	e02c      	b.n	8002f8e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f40:	461a      	mov	r2, r3
 8002f42:	f000 f938 	bl	80031b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2160      	movs	r1, #96	@ 0x60
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 f962 	bl	8003216 <TIM_ITRx_SetConfig>
      break;
 8002f52:	e01c      	b.n	8002f8e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f60:	461a      	mov	r2, r3
 8002f62:	f000 f8f9 	bl	8003158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2140      	movs	r1, #64	@ 0x40
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 f952 	bl	8003216 <TIM_ITRx_SetConfig>
      break;
 8002f72:	e00c      	b.n	8002f8e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	f000 f949 	bl	8003216 <TIM_ITRx_SetConfig>
      break;
 8002f84:	e003      	b.n	8002f8e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	73fb      	strb	r3, [r7, #15]
      break;
 8002f8a:	e000      	b.n	8002f8e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a43      	ldr	r2, [pc, #268]	@ (800312c <TIM_Base_SetConfig+0x120>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d013      	beq.n	800304c <TIM_Base_SetConfig+0x40>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800302a:	d00f      	beq.n	800304c <TIM_Base_SetConfig+0x40>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a40      	ldr	r2, [pc, #256]	@ (8003130 <TIM_Base_SetConfig+0x124>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00b      	beq.n	800304c <TIM_Base_SetConfig+0x40>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a3f      	ldr	r2, [pc, #252]	@ (8003134 <TIM_Base_SetConfig+0x128>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <TIM_Base_SetConfig+0x40>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a3e      	ldr	r2, [pc, #248]	@ (8003138 <TIM_Base_SetConfig+0x12c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d003      	beq.n	800304c <TIM_Base_SetConfig+0x40>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a3d      	ldr	r2, [pc, #244]	@ (800313c <TIM_Base_SetConfig+0x130>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d108      	bne.n	800305e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a32      	ldr	r2, [pc, #200]	@ (800312c <TIM_Base_SetConfig+0x120>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d02b      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800306c:	d027      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a2f      	ldr	r2, [pc, #188]	@ (8003130 <TIM_Base_SetConfig+0x124>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d023      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a2e      	ldr	r2, [pc, #184]	@ (8003134 <TIM_Base_SetConfig+0x128>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d01f      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a2d      	ldr	r2, [pc, #180]	@ (8003138 <TIM_Base_SetConfig+0x12c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d01b      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a2c      	ldr	r2, [pc, #176]	@ (800313c <TIM_Base_SetConfig+0x130>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d017      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a2b      	ldr	r2, [pc, #172]	@ (8003140 <TIM_Base_SetConfig+0x134>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d013      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a2a      	ldr	r2, [pc, #168]	@ (8003144 <TIM_Base_SetConfig+0x138>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00f      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a29      	ldr	r2, [pc, #164]	@ (8003148 <TIM_Base_SetConfig+0x13c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d00b      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a28      	ldr	r2, [pc, #160]	@ (800314c <TIM_Base_SetConfig+0x140>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d007      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a27      	ldr	r2, [pc, #156]	@ (8003150 <TIM_Base_SetConfig+0x144>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d003      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a26      	ldr	r2, [pc, #152]	@ (8003154 <TIM_Base_SetConfig+0x148>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d108      	bne.n	80030d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a0e      	ldr	r2, [pc, #56]	@ (800312c <TIM_Base_SetConfig+0x120>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d003      	beq.n	80030fe <TIM_Base_SetConfig+0xf2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a10      	ldr	r2, [pc, #64]	@ (800313c <TIM_Base_SetConfig+0x130>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d103      	bne.n	8003106 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f043 0204 	orr.w	r2, r3, #4
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	601a      	str	r2, [r3, #0]
}
 800311e:	bf00      	nop
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40010000 	.word	0x40010000
 8003130:	40000400 	.word	0x40000400
 8003134:	40000800 	.word	0x40000800
 8003138:	40000c00 	.word	0x40000c00
 800313c:	40010400 	.word	0x40010400
 8003140:	40014000 	.word	0x40014000
 8003144:	40014400 	.word	0x40014400
 8003148:	40014800 	.word	0x40014800
 800314c:	40001800 	.word	0x40001800
 8003150:	40001c00 	.word	0x40001c00
 8003154:	40002000 	.word	0x40002000

08003158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f023 0201 	bic.w	r2, r3, #1
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f023 030a 	bic.w	r3, r3, #10
 8003194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	621a      	str	r2, [r3, #32]
}
 80031aa:	bf00      	nop
 80031ac:	371c      	adds	r7, #28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b087      	sub	sp, #28
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	f023 0210 	bic.w	r2, r3, #16
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	031b      	lsls	r3, r3, #12
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80031f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	621a      	str	r2, [r3, #32]
}
 800320a:	bf00      	nop
 800320c:	371c      	adds	r7, #28
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003216:	b480      	push	{r7}
 8003218:	b085      	sub	sp, #20
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800322c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	f043 0307 	orr.w	r3, r3, #7
 8003238:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	609a      	str	r2, [r3, #8]
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003266:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	021a      	lsls	r2, r3, #8
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	431a      	orrs	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4313      	orrs	r3, r2
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	609a      	str	r2, [r3, #8]
}
 8003280:	bf00      	nop
 8003282:	371c      	adds	r7, #28
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e05a      	b.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a21      	ldr	r2, [pc, #132]	@ (8003368 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d022      	beq.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032f0:	d01d      	beq.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1d      	ldr	r2, [pc, #116]	@ (800336c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d018      	beq.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a1b      	ldr	r2, [pc, #108]	@ (8003370 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d013      	beq.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1a      	ldr	r2, [pc, #104]	@ (8003374 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00e      	beq.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a18      	ldr	r2, [pc, #96]	@ (8003378 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d009      	beq.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a17      	ldr	r2, [pc, #92]	@ (800337c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d004      	beq.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a15      	ldr	r2, [pc, #84]	@ (8003380 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d10c      	bne.n	8003348 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003334:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	4313      	orrs	r3, r2
 800333e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40010000 	.word	0x40010000
 800336c:	40000400 	.word	0x40000400
 8003370:	40000800 	.word	0x40000800
 8003374:	40000c00 	.word	0x40000c00
 8003378:	40010400 	.word	0x40010400
 800337c:	40014000 	.word	0x40014000
 8003380:	40001800 	.word	0x40001800

08003384 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <Motor_Init>:
uint8_t statrt_layer=3;									//料盘起始层
uint8_t sys_state=0;									//系统状态机
uint8_t stop_state=0;									//急停状态机 0:不停机 1:停机

void Motor_Init(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
	uint8_t i;

	for(i=0;i<motor_num;i++)
 80033b2:	2300      	movs	r3, #0
 80033b4:	71fb      	strb	r3, [r7, #7]
 80033b6:	e00f      	b.n	80033d8 <Motor_Init+0x2c>
	{
	  motor_statuses[i].id = i+1;
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	79fa      	ldrb	r2, [r7, #7]
 80033bc:	3201      	adds	r2, #1
 80033be:	b2d1      	uxtb	r1, r2
 80033c0:	4a0a      	ldr	r2, [pc, #40]	@ (80033ec <Motor_Init+0x40>)
 80033c2:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	  motor_statuses[i].is_reach=0;
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	4a08      	ldr	r2, [pc, #32]	@ (80033ec <Motor_Init+0x40>)
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	4413      	add	r3, r2
 80033ce:	2200      	movs	r2, #0
 80033d0:	705a      	strb	r2, [r3, #1]
	for(i=0;i<motor_num;i++)
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	3301      	adds	r3, #1
 80033d6:	71fb      	strb	r3, [r7, #7]
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d9ec      	bls.n	80033b8 <Motor_Init+0xc>
	}
}
 80033de:	bf00      	nop
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	200000ec 	.word	0x200000ec

080033f0 <motorGoHome>:

void motorGoHome(uint8_t slaveAddr)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
  txBuffer[0] = 0x91;
 80033fa:	4b07      	ldr	r3, [pc, #28]	@ (8003418 <motorGoHome+0x28>)
 80033fc:	2291      	movs	r2, #145	@ 0x91
 80033fe:	701a      	strb	r2, [r3, #0]
  CAN1_Send_Msg(txBuffer,2,slaveAddr);
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	b29b      	uxth	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	2102      	movs	r1, #2
 8003408:	4803      	ldr	r0, [pc, #12]	@ (8003418 <motorGoHome+0x28>)
 800340a:	f7fd f8fd 	bl	8000608 <CAN1_Send_Msg>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000028 	.word	0x20000028

0800341c <motor_AllGoHome>:

void motor_AllGoHome(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t tick=0;
 8003422:	2300      	movs	r3, #0
 8003424:	603b      	str	r3, [r7, #0]
	for(i=0;i<motor_num;i++)
 8003426:	2300      	movs	r3, #0
 8003428:	71fb      	strb	r3, [r7, #7]
 800342a:	e00b      	b.n	8003444 <motor_AllGoHome+0x28>
	{
		motorGoHome(i+1);
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	3301      	adds	r3, #1
 8003430:	b2db      	uxtb	r3, r3
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff ffdc 	bl	80033f0 <motorGoHome>
		HAL_Delay(100);
 8003438:	2064      	movs	r0, #100	@ 0x64
 800343a:	f7fd fd93 	bl	8000f64 <HAL_Delay>
	for(i=0;i<motor_num;i++)
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	3301      	adds	r3, #1
 8003442:	71fb      	strb	r3, [r7, #7]
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	2b04      	cmp	r3, #4
 8003448:	d9f0      	bls.n	800342c <motor_AllGoHome+0x10>
	}
	while(motor_statuses[0].is_reach==0 ||motor_statuses[1].is_reach==0 ||motor_statuses[2].is_reach==0 ||motor_statuses[3].is_reach==0 || motor_statuses[4].is_reach==0)
 800344a:	e00a      	b.n	8003462 <motor_AllGoHome+0x46>
	{
		HAL_Delay(100);
 800344c:	2064      	movs	r0, #100	@ 0x64
 800344e:	f7fd fd89 	bl	8000f64 <HAL_Delay>
		tick++;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	3301      	adds	r3, #1
 8003456:	603b      	str	r3, [r7, #0]
		if(tick>=50000)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800345e:	4293      	cmp	r3, r2
 8003460:	d814      	bhi.n	800348c <motor_AllGoHome+0x70>
	while(motor_statuses[0].is_reach==0 ||motor_statuses[1].is_reach==0 ||motor_statuses[2].is_reach==0 ||motor_statuses[3].is_reach==0 || motor_statuses[4].is_reach==0)
 8003462:	4b21      	ldr	r3, [pc, #132]	@ (80034e8 <motor_AllGoHome+0xcc>)
 8003464:	785b      	ldrb	r3, [r3, #1]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <motor_AllGoHome+0x30>
 800346a:	4b1f      	ldr	r3, [pc, #124]	@ (80034e8 <motor_AllGoHome+0xcc>)
 800346c:	78db      	ldrb	r3, [r3, #3]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0ec      	beq.n	800344c <motor_AllGoHome+0x30>
 8003472:	4b1d      	ldr	r3, [pc, #116]	@ (80034e8 <motor_AllGoHome+0xcc>)
 8003474:	795b      	ldrb	r3, [r3, #5]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0e8      	beq.n	800344c <motor_AllGoHome+0x30>
 800347a:	4b1b      	ldr	r3, [pc, #108]	@ (80034e8 <motor_AllGoHome+0xcc>)
 800347c:	79db      	ldrb	r3, [r3, #7]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0e4      	beq.n	800344c <motor_AllGoHome+0x30>
 8003482:	4b19      	ldr	r3, [pc, #100]	@ (80034e8 <motor_AllGoHome+0xcc>)
 8003484:	7a5b      	ldrb	r3, [r3, #9]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0e0      	beq.n	800344c <motor_AllGoHome+0x30>
 800348a:	e000      	b.n	800348e <motor_AllGoHome+0x72>
		{
			break;
 800348c:	bf00      	nop
		}
	}
	if(motor_statuses[0].is_reach==0 ||motor_statuses[1].is_reach==0 ||motor_statuses[2].is_reach==0 ||motor_statuses[3].is_reach==0 || motor_statuses[4].is_reach==0)
 800348e:	4b16      	ldr	r3, [pc, #88]	@ (80034e8 <motor_AllGoHome+0xcc>)
 8003490:	785b      	ldrb	r3, [r3, #1]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d023      	beq.n	80034de <motor_AllGoHome+0xc2>
 8003496:	4b14      	ldr	r3, [pc, #80]	@ (80034e8 <motor_AllGoHome+0xcc>)
 8003498:	78db      	ldrb	r3, [r3, #3]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d01f      	beq.n	80034de <motor_AllGoHome+0xc2>
 800349e:	4b12      	ldr	r3, [pc, #72]	@ (80034e8 <motor_AllGoHome+0xcc>)
 80034a0:	795b      	ldrb	r3, [r3, #5]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01b      	beq.n	80034de <motor_AllGoHome+0xc2>
 80034a6:	4b10      	ldr	r3, [pc, #64]	@ (80034e8 <motor_AllGoHome+0xcc>)
 80034a8:	79db      	ldrb	r3, [r3, #7]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d017      	beq.n	80034de <motor_AllGoHome+0xc2>
 80034ae:	4b0e      	ldr	r3, [pc, #56]	@ (80034e8 <motor_AllGoHome+0xcc>)
 80034b0:	7a5b      	ldrb	r3, [r3, #9]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d013      	beq.n	80034de <motor_AllGoHome+0xc2>
	{
		/*错误处理*/
	}
	else
	{
		tick=0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	603b      	str	r3, [r7, #0]
		motor_statuses[0].is_reach=0;
 80034ba:	4b0b      	ldr	r3, [pc, #44]	@ (80034e8 <motor_AllGoHome+0xcc>)
 80034bc:	2200      	movs	r2, #0
 80034be:	705a      	strb	r2, [r3, #1]
		motor_statuses[1].is_reach=0;
 80034c0:	4b09      	ldr	r3, [pc, #36]	@ (80034e8 <motor_AllGoHome+0xcc>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	70da      	strb	r2, [r3, #3]
		motor_statuses[2].is_reach=0;
 80034c6:	4b08      	ldr	r3, [pc, #32]	@ (80034e8 <motor_AllGoHome+0xcc>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	715a      	strb	r2, [r3, #5]
		motor_statuses[3].is_reach=0;
 80034cc:	4b06      	ldr	r3, [pc, #24]	@ (80034e8 <motor_AllGoHome+0xcc>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	71da      	strb	r2, [r3, #7]
		motor_statuses[4].is_reach=0;
 80034d2:	4b05      	ldr	r3, [pc, #20]	@ (80034e8 <motor_AllGoHome+0xcc>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	725a      	strb	r2, [r3, #9]
		sys_state=1;
 80034d8:	4b04      	ldr	r3, [pc, #16]	@ (80034ec <motor_AllGoHome+0xd0>)
 80034da:	2201      	movs	r2, #1
 80034dc:	701a      	strb	r2, [r3, #0]
	}
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200000ec 	.word	0x200000ec
 80034ec:	20000128 	.word	0x20000128

080034f0 <motorGoPosition>:

void motorGoPosition(uint8_t slaveAddr,uint16_t speed,uint8_t acc,int32_t pos)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	4603      	mov	r3, r0
 80034fa:	71fb      	strb	r3, [r7, #7]
 80034fc:	460b      	mov	r3, r1
 80034fe:	80bb      	strh	r3, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	71bb      	strb	r3, [r7, #6]
  txBuffer[0] = 0xF5;       		//FD:相对脉冲(16细分*200),FE:绝对脉冲
 8003504:	4b14      	ldr	r3, [pc, #80]	@ (8003558 <motorGoPosition+0x68>)
 8003506:	22f5      	movs	r2, #245	@ 0xf5
 8003508:	701a      	strb	r2, [r3, #0]
  	  	  	  	  	  	  	  	  	//F4:相对坐标,F5:绝对坐标(16384/r)

  txBuffer[1] = (speed>>8)&0x00FF;  //
 800350a:	88bb      	ldrh	r3, [r7, #4]
 800350c:	0a1b      	lsrs	r3, r3, #8
 800350e:	b29b      	uxth	r3, r3
 8003510:	b2da      	uxtb	r2, r3
 8003512:	4b11      	ldr	r3, [pc, #68]	@ (8003558 <motorGoPosition+0x68>)
 8003514:	705a      	strb	r2, [r3, #1]
  txBuffer[2] = speed&0x00FF;
 8003516:	88bb      	ldrh	r3, [r7, #4]
 8003518:	b2da      	uxtb	r2, r3
 800351a:	4b0f      	ldr	r3, [pc, #60]	@ (8003558 <motorGoPosition+0x68>)
 800351c:	709a      	strb	r2, [r3, #2]
  txBuffer[3] = acc;
 800351e:	4a0e      	ldr	r2, [pc, #56]	@ (8003558 <motorGoPosition+0x68>)
 8003520:	79bb      	ldrb	r3, [r7, #6]
 8003522:	70d3      	strb	r3, [r2, #3]
  txBuffer[4] = (pos >> 16)&0xFF;  // bit23 - bit16
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	141b      	asrs	r3, r3, #16
 8003528:	b2da      	uxtb	r2, r3
 800352a:	4b0b      	ldr	r3, [pc, #44]	@ (8003558 <motorGoPosition+0x68>)
 800352c:	711a      	strb	r2, [r3, #4]
  txBuffer[5] = (pos >> 8)&0xFF;   // bit15 - bit8
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	121b      	asrs	r3, r3, #8
 8003532:	b2da      	uxtb	r2, r3
 8003534:	4b08      	ldr	r3, [pc, #32]	@ (8003558 <motorGoPosition+0x68>)
 8003536:	715a      	strb	r2, [r3, #5]
  txBuffer[6] = (pos >> 0)&0xFF;   // bit7 - bit0
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <motorGoPosition+0x68>)
 800353e:	719a      	strb	r2, [r3, #6]
  CAN1_Send_Msg(txBuffer,8,slaveAddr);
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	b29b      	uxth	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	2108      	movs	r1, #8
 8003548:	4803      	ldr	r0, [pc, #12]	@ (8003558 <motorGoPosition+0x68>)
 800354a:	f7fd f85d 	bl	8000608 <CAN1_Send_Msg>
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	20000028 	.word	0x20000028

0800355c <Tray_posInit>:
	if(HAL_GPIO_ReadPin(X4_GPIO_Port, X4_Pin)==0)	inputs[3]=1;
	if(HAL_GPIO_ReadPin(X5_GPIO_Port, X5_Pin)==0)	inputs[4]=1;
}

void Tray_posInit(uint32_t tray_offset,uint32_t heigh)														//料盘位置初始化
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
	uint8_t i;
	uint32_t t_off=tray_offset/lead_screw*16384;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a19      	ldr	r2, [pc, #100]	@ (80035d0 <Tray_posInit+0x74>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	08db      	lsrs	r3, r3, #3
 8003570:	039b      	lsls	r3, r3, #14
 8003572:	613b      	str	r3, [r7, #16]
	uint32_t h=heigh/lead_screw*16384;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	4a16      	ldr	r2, [pc, #88]	@ (80035d0 <Tray_posInit+0x74>)
 8003578:	fba2 2303 	umull	r2, r3, r2, r3
 800357c:	08db      	lsrs	r3, r3, #3
 800357e:	039b      	lsls	r3, r3, #14
 8003580:	60fb      	str	r3, [r7, #12]

	for(i=tray_num;i>1;i--){
 8003582:	2305      	movs	r3, #5
 8003584:	75fb      	strb	r3, [r7, #23]
 8003586:	e010      	b.n	80035aa <Tray_posInit+0x4e>
		tray_position[i-1]=t_off+((i-2)*h);
 8003588:	7dfb      	ldrb	r3, [r7, #23]
 800358a:	3b02      	subs	r3, #2
 800358c:	461a      	mov	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	fb03 f202 	mul.w	r2, r3, r2
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	441a      	add	r2, r3
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	3b01      	subs	r3, #1
 800359c:	4611      	mov	r1, r2
 800359e:	4a0d      	ldr	r2, [pc, #52]	@ (80035d4 <Tray_posInit+0x78>)
 80035a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(i=tray_num;i>1;i--){
 80035a4:	7dfb      	ldrb	r3, [r7, #23]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	75fb      	strb	r3, [r7, #23]
 80035aa:	7dfb      	ldrb	r3, [r7, #23]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d8eb      	bhi.n	8003588 <Tray_posInit+0x2c>
	}
	tray_position[0]=tray_position[tray_num-1]+h/2;
 80035b0:	4b08      	ldr	r3, [pc, #32]	@ (80035d4 <Tray_posInit+0x78>)
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	461a      	mov	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	085b      	lsrs	r3, r3, #1
 80035ba:	4413      	add	r3, r2
 80035bc:	461a      	mov	r2, r3
 80035be:	4b05      	ldr	r3, [pc, #20]	@ (80035d4 <Tray_posInit+0x78>)
 80035c0:	601a      	str	r2, [r3, #0]
}
 80035c2:	bf00      	nop
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	cccccccd 	.word	0xcccccccd
 80035d4:	20000100 	.word	0x20000100

080035d8 <PutDown_posInit>:

void PutDown_posInit(uint32_t PutDown_offset,uint32_t heigh)													//料盘放置位置初始化
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
	uint8_t i;
	uint32_t p_off=PutDown_offset/lead_screw*16384;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a19      	ldr	r2, [pc, #100]	@ (800364c <PutDown_posInit+0x74>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	08db      	lsrs	r3, r3, #3
 80035ec:	039b      	lsls	r3, r3, #14
 80035ee:	613b      	str	r3, [r7, #16]
	uint32_t h=heigh/lead_screw*16384;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	4a16      	ldr	r2, [pc, #88]	@ (800364c <PutDown_posInit+0x74>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	08db      	lsrs	r3, r3, #3
 80035fa:	039b      	lsls	r3, r3, #14
 80035fc:	60fb      	str	r3, [r7, #12]

	for(i=tray_num;i>1;i--)
 80035fe:	2305      	movs	r3, #5
 8003600:	75fb      	strb	r3, [r7, #23]
 8003602:	e011      	b.n	8003628 <PutDown_posInit+0x50>
	{
		PutDown_position[i-1]=p_off+((tray_num-i)*h);
 8003604:	7dfb      	ldrb	r3, [r7, #23]
 8003606:	f1c3 0305 	rsb	r3, r3, #5
 800360a:	461a      	mov	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	fb03 f202 	mul.w	r2, r3, r2
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	441a      	add	r2, r3
 8003616:	7dfb      	ldrb	r3, [r7, #23]
 8003618:	3b01      	subs	r3, #1
 800361a:	4611      	mov	r1, r2
 800361c:	4a0c      	ldr	r2, [pc, #48]	@ (8003650 <PutDown_posInit+0x78>)
 800361e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(i=tray_num;i>1;i--)
 8003622:	7dfb      	ldrb	r3, [r7, #23]
 8003624:	3b01      	subs	r3, #1
 8003626:	75fb      	strb	r3, [r7, #23]
 8003628:	7dfb      	ldrb	r3, [r7, #23]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d8ea      	bhi.n	8003604 <PutDown_posInit+0x2c>
	}
	PutDown_position[0]=PutDown_position[1]+h/4;
 800362e:	4b08      	ldr	r3, [pc, #32]	@ (8003650 <PutDown_posInit+0x78>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	461a      	mov	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	089b      	lsrs	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	461a      	mov	r2, r3
 800363c:	4b04      	ldr	r3, [pc, #16]	@ (8003650 <PutDown_posInit+0x78>)
 800363e:	601a      	str	r2, [r3, #0]
}
 8003640:	bf00      	nop
 8003642:	371c      	adds	r7, #28
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	cccccccd 	.word	0xcccccccd
 8003650:	20000114 	.word	0x20000114

08003654 <Position_Init>:


void Position_Init(uint32_t tray_offset,uint32_t PutDown_offset,uint32_t heigh)													//取料放料位置初始化
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
	Tray_posInit(tray_offset,heigh);
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f7ff ff7a 	bl	800355c <Tray_posInit>
	PutDown_posInit(PutDown_offset,heigh);
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	68b8      	ldr	r0, [r7, #8]
 800366c:	f7ff ffb4 	bl	80035d8 <PutDown_posInit>
}
 8003670:	bf00      	nop
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <MoveFirstGMotors>:

void MoveFirstGMotors(uint8_t state,uint16_t speed,uint8_t acc)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	71fb      	strb	r3, [r7, #7]
 8003682:	460b      	mov	r3, r1
 8003684:	80bb      	strh	r3, [r7, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	71bb      	strb	r3, [r7, #6]
	if(state==0)							//钩子张开
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10e      	bne.n	80036ae <MoveFirstGMotors+0x36>
	{
		motorGoPosition(1,1000,100,240000);
 8003690:	4b12      	ldr	r3, [pc, #72]	@ (80036dc <MoveFirstGMotors+0x64>)
 8003692:	2264      	movs	r2, #100	@ 0x64
 8003694:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003698:	2001      	movs	r0, #1
 800369a:	f7ff ff29 	bl	80034f0 <motorGoPosition>
		motorGoPosition(2,1000,100,-240000);
 800369e:	4b10      	ldr	r3, [pc, #64]	@ (80036e0 <MoveFirstGMotors+0x68>)
 80036a0:	2264      	movs	r2, #100	@ 0x64
 80036a2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80036a6:	2002      	movs	r0, #2
 80036a8:	f7ff ff22 	bl	80034f0 <motorGoPosition>
	else if(state==1)
	{
		motorGoPosition(1,1000,100,-200);
		motorGoPosition(2,1000,100,200);
	}
}
 80036ac:	e011      	b.n	80036d2 <MoveFirstGMotors+0x5a>
	else if(state==1)
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d10e      	bne.n	80036d2 <MoveFirstGMotors+0x5a>
		motorGoPosition(1,1000,100,-200);
 80036b4:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80036b8:	2264      	movs	r2, #100	@ 0x64
 80036ba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80036be:	2001      	movs	r0, #1
 80036c0:	f7ff ff16 	bl	80034f0 <motorGoPosition>
		motorGoPosition(2,1000,100,200);
 80036c4:	23c8      	movs	r3, #200	@ 0xc8
 80036c6:	2264      	movs	r2, #100	@ 0x64
 80036c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80036cc:	2002      	movs	r0, #2
 80036ce:	f7ff ff0f 	bl	80034f0 <motorGoPosition>
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	0003a980 	.word	0x0003a980
 80036e0:	fffc5680 	.word	0xfffc5680

080036e4 <MoveSecondGMotors>:

void MoveSecondGMotors(uint8_t state,uint16_t speed,uint8_t acc)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	71fb      	strb	r3, [r7, #7]
 80036ee:	460b      	mov	r3, r1
 80036f0:	80bb      	strh	r3, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	71bb      	strb	r3, [r7, #6]
	if(state==0)							//小臂前伸
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10c      	bne.n	8003716 <MoveSecondGMotors+0x32>
	{
		motorGoPosition(3,speed,acc,-79000);
 80036fc:	79ba      	ldrb	r2, [r7, #6]
 80036fe:	88b9      	ldrh	r1, [r7, #4]
 8003700:	4b0f      	ldr	r3, [pc, #60]	@ (8003740 <MoveSecondGMotors+0x5c>)
 8003702:	2003      	movs	r0, #3
 8003704:	f7ff fef4 	bl	80034f0 <motorGoPosition>
		motorGoPosition(4,speed,acc,-79000);
 8003708:	79ba      	ldrb	r2, [r7, #6]
 800370a:	88b9      	ldrh	r1, [r7, #4]
 800370c:	4b0c      	ldr	r3, [pc, #48]	@ (8003740 <MoveSecondGMotors+0x5c>)
 800370e:	2004      	movs	r0, #4
 8003710:	f7ff feee 	bl	80034f0 <motorGoPosition>
	else if(state==1)
	{
		motorGoPosition(3,speed,acc,5000);
		motorGoPosition(4,speed,acc,5000);
	}
}
 8003714:	e010      	b.n	8003738 <MoveSecondGMotors+0x54>
	else if(state==1)
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d10d      	bne.n	8003738 <MoveSecondGMotors+0x54>
		motorGoPosition(3,speed,acc,5000);
 800371c:	79ba      	ldrb	r2, [r7, #6]
 800371e:	88b9      	ldrh	r1, [r7, #4]
 8003720:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003724:	2003      	movs	r0, #3
 8003726:	f7ff fee3 	bl	80034f0 <motorGoPosition>
		motorGoPosition(4,speed,acc,5000);
 800372a:	79ba      	ldrb	r2, [r7, #6]
 800372c:	88b9      	ldrh	r1, [r7, #4]
 800372e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003732:	2004      	movs	r0, #4
 8003734:	f7ff fedc 	bl	80034f0 <motorGoPosition>
}
 8003738:	bf00      	nop
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	fffecb68 	.word	0xfffecb68

08003744 <MoveFifthMotor>:

void MoveFifthMotor(uint16_t speed,uint8_t acc,int32_t pos)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	603a      	str	r2, [r7, #0]
 800374e:	80fb      	strh	r3, [r7, #6]
 8003750:	460b      	mov	r3, r1
 8003752:	717b      	strb	r3, [r7, #5]
	motorGoPosition(5,speed,acc,pos);
 8003754:	797a      	ldrb	r2, [r7, #5]
 8003756:	88f9      	ldrh	r1, [r7, #6]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2005      	movs	r0, #5
 800375c:	f7ff fec8 	bl	80034f0 <motorGoPosition>
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <GetMaterial>:

void GetMaterial(uint8_t num)												//去取num盘料
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	71fb      	strb	r3, [r7, #7]
	uint32_t tick=0;
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
/*-----------------------整体升降到料盘处-----------------------------*/
	MoveFifthMotor(500, 50, tray_position[num]);
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	4a3b      	ldr	r2, [pc, #236]	@ (8003868 <GetMaterial+0x100>)
 800377a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800377e:	461a      	mov	r2, r3
 8003780:	2132      	movs	r1, #50	@ 0x32
 8003782:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003786:	f7ff ffdd 	bl	8003744 <MoveFifthMotor>
	while(motor_statuses[4].is_reach!=1)
 800378a:	e00a      	b.n	80037a2 <GetMaterial+0x3a>
	{
		HAL_Delay(50);
 800378c:	2032      	movs	r0, #50	@ 0x32
 800378e:	f7fd fbe9 	bl	8000f64 <HAL_Delay>
		tick+=1;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3301      	adds	r3, #1
 8003796:	60fb      	str	r3, [r7, #12]
		if(tick>=10000) break;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800379e:	4293      	cmp	r3, r2
 80037a0:	d804      	bhi.n	80037ac <GetMaterial+0x44>
	while(motor_statuses[4].is_reach!=1)
 80037a2:	4b32      	ldr	r3, [pc, #200]	@ (800386c <GetMaterial+0x104>)
 80037a4:	7a5b      	ldrb	r3, [r3, #9]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d1f0      	bne.n	800378c <GetMaterial+0x24>
 80037aa:	e000      	b.n	80037ae <GetMaterial+0x46>
		if(tick>=10000) break;
 80037ac:	bf00      	nop
	};
	if(motor_statuses[4].is_reach==0)
 80037ae:	4b2f      	ldr	r3, [pc, #188]	@ (800386c <GetMaterial+0x104>)
 80037b0:	7a5b      	ldrb	r3, [r3, #9]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d004      	beq.n	80037c0 <GetMaterial+0x58>
		 *
		 * */
	}
	else
	{
		motor_statuses[4].is_reach=0;
 80037b6:	4b2d      	ldr	r3, [pc, #180]	@ (800386c <GetMaterial+0x104>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	725a      	strb	r2, [r3, #9]
		tick=0;
 80037bc:	2300      	movs	r3, #0
 80037be:	60fb      	str	r3, [r7, #12]
	}

/*--------------------------钩子钩住--------------------------*/
		MoveFirstGMotors(0, 1000, 100);
 80037c0:	2264      	movs	r2, #100	@ 0x64
 80037c2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80037c6:	2000      	movs	r0, #0
 80037c8:	f7ff ff56 	bl	8003678 <MoveFirstGMotors>
		while(motor_statuses[0].is_reach!=1 || motor_statuses[1].is_reach!=1)
 80037cc:	e00a      	b.n	80037e4 <GetMaterial+0x7c>
		{
			HAL_Delay(50);
 80037ce:	2032      	movs	r0, #50	@ 0x32
 80037d0:	f7fd fbc8 	bl	8000f64 <HAL_Delay>
			tick+=1;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3301      	adds	r3, #1
 80037d8:	60fb      	str	r3, [r7, #12]
			if(tick>=10000) break;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d808      	bhi.n	80037f6 <GetMaterial+0x8e>
		while(motor_statuses[0].is_reach!=1 || motor_statuses[1].is_reach!=1)
 80037e4:	4b21      	ldr	r3, [pc, #132]	@ (800386c <GetMaterial+0x104>)
 80037e6:	785b      	ldrb	r3, [r3, #1]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d1f0      	bne.n	80037ce <GetMaterial+0x66>
 80037ec:	4b1f      	ldr	r3, [pc, #124]	@ (800386c <GetMaterial+0x104>)
 80037ee:	78db      	ldrb	r3, [r3, #3]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d1ec      	bne.n	80037ce <GetMaterial+0x66>
 80037f4:	e000      	b.n	80037f8 <GetMaterial+0x90>
			if(tick>=10000) break;
 80037f6:	bf00      	nop
		};
		if(motor_statuses[0].is_reach==0 || motor_statuses[1].is_reach==0 )
 80037f8:	4b1c      	ldr	r3, [pc, #112]	@ (800386c <GetMaterial+0x104>)
 80037fa:	785b      	ldrb	r3, [r3, #1]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00b      	beq.n	8003818 <GetMaterial+0xb0>
 8003800:	4b1a      	ldr	r3, [pc, #104]	@ (800386c <GetMaterial+0x104>)
 8003802:	78db      	ldrb	r3, [r3, #3]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d007      	beq.n	8003818 <GetMaterial+0xb0>
			 *
			 * */
		}
		else
		{
			motor_statuses[0].is_reach=0;
 8003808:	4b18      	ldr	r3, [pc, #96]	@ (800386c <GetMaterial+0x104>)
 800380a:	2200      	movs	r2, #0
 800380c:	705a      	strb	r2, [r3, #1]
			motor_statuses[1].is_reach=0;
 800380e:	4b17      	ldr	r3, [pc, #92]	@ (800386c <GetMaterial+0x104>)
 8003810:	2200      	movs	r2, #0
 8003812:	70da      	strb	r2, [r3, #3]
			tick=0;
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
		}
/*---------------------------整体上升到机器人工作处-------------------------*/
			MoveFifthMotor(500, 50, tray_position[0]);
 8003818:	4b13      	ldr	r3, [pc, #76]	@ (8003868 <GetMaterial+0x100>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	2132      	movs	r1, #50	@ 0x32
 8003820:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003824:	f7ff ff8e 	bl	8003744 <MoveFifthMotor>
			while(motor_statuses[4].is_reach!=1)
 8003828:	e00a      	b.n	8003840 <GetMaterial+0xd8>
			{
				HAL_Delay(50);
 800382a:	2032      	movs	r0, #50	@ 0x32
 800382c:	f7fd fb9a 	bl	8000f64 <HAL_Delay>
				tick+=1;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3301      	adds	r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
				if(tick>=10000) break;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f242 720f 	movw	r2, #9999	@ 0x270f
 800383c:	4293      	cmp	r3, r2
 800383e:	d804      	bhi.n	800384a <GetMaterial+0xe2>
			while(motor_statuses[4].is_reach!=1)
 8003840:	4b0a      	ldr	r3, [pc, #40]	@ (800386c <GetMaterial+0x104>)
 8003842:	7a5b      	ldrb	r3, [r3, #9]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d1f0      	bne.n	800382a <GetMaterial+0xc2>
 8003848:	e000      	b.n	800384c <GetMaterial+0xe4>
				if(tick>=10000) break;
 800384a:	bf00      	nop
			};
			if(motor_statuses[4].is_reach==0)
 800384c:	4b07      	ldr	r3, [pc, #28]	@ (800386c <GetMaterial+0x104>)
 800384e:	7a5b      	ldrb	r3, [r3, #9]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d004      	beq.n	800385e <GetMaterial+0xf6>
				 *
				 * */
			}
			else
			{
				motor_statuses[4].is_reach=0;
 8003854:	4b05      	ldr	r3, [pc, #20]	@ (800386c <GetMaterial+0x104>)
 8003856:	2200      	movs	r2, #0
 8003858:	725a      	strb	r2, [r3, #9]
				tick=0;
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
			}
}
 800385e:	bf00      	nop
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000100 	.word	0x20000100
 800386c:	200000ec 	.word	0x200000ec

08003870 <PutDownMaterial>:

void PutDownMaterial(uint8_t num)											//放第num盘料
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	71fb      	strb	r3, [r7, #7]
	uint32_t tick=0;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
/*---------------------------整体降到放料最高点-------------------------*/
	MoveFifthMotor(500, 50, PutDown_position[0]);
 800387e:	4b68      	ldr	r3, [pc, #416]	@ (8003a20 <PutDownMaterial+0x1b0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	2132      	movs	r1, #50	@ 0x32
 8003886:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800388a:	f7ff ff5b 	bl	8003744 <MoveFifthMotor>
	while(motor_statuses[4].is_reach!=1)
 800388e:	e00a      	b.n	80038a6 <PutDownMaterial+0x36>
	{
		HAL_Delay(50);
 8003890:	2032      	movs	r0, #50	@ 0x32
 8003892:	f7fd fb67 	bl	8000f64 <HAL_Delay>
		tick+=1;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3301      	adds	r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
		if(tick>=10000) break;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f242 720f 	movw	r2, #9999	@ 0x270f
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d804      	bhi.n	80038b0 <PutDownMaterial+0x40>
	while(motor_statuses[4].is_reach!=1)
 80038a6:	4b5f      	ldr	r3, [pc, #380]	@ (8003a24 <PutDownMaterial+0x1b4>)
 80038a8:	7a5b      	ldrb	r3, [r3, #9]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d1f0      	bne.n	8003890 <PutDownMaterial+0x20>
 80038ae:	e000      	b.n	80038b2 <PutDownMaterial+0x42>
		if(tick>=10000) break;
 80038b0:	bf00      	nop
	};
	if(motor_statuses[4].is_reach==0)
 80038b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003a24 <PutDownMaterial+0x1b4>)
 80038b4:	7a5b      	ldrb	r3, [r3, #9]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d004      	beq.n	80038c4 <PutDownMaterial+0x54>
		 *
		 * */
	}
	else
	{
		motor_statuses[4].is_reach=0;
 80038ba:	4b5a      	ldr	r3, [pc, #360]	@ (8003a24 <PutDownMaterial+0x1b4>)
 80038bc:	2200      	movs	r2, #0
 80038be:	725a      	strb	r2, [r3, #9]
		tick=0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]
	}

/*---------------------------小臂前伸-------------------------*/
	MoveSecondGMotors(0, 1000, 50);
 80038c4:	2232      	movs	r2, #50	@ 0x32
 80038c6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80038ca:	2000      	movs	r0, #0
 80038cc:	f7ff ff0a 	bl	80036e4 <MoveSecondGMotors>
	while(motor_statuses[2].is_reach!=1 || motor_statuses[3].is_reach!=1)
 80038d0:	e00a      	b.n	80038e8 <PutDownMaterial+0x78>
	{
		HAL_Delay(50);
 80038d2:	2032      	movs	r0, #50	@ 0x32
 80038d4:	f7fd fb46 	bl	8000f64 <HAL_Delay>
		tick+=1;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3301      	adds	r3, #1
 80038dc:	60fb      	str	r3, [r7, #12]
		if(tick>=10000) break;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d808      	bhi.n	80038fa <PutDownMaterial+0x8a>
	while(motor_statuses[2].is_reach!=1 || motor_statuses[3].is_reach!=1)
 80038e8:	4b4e      	ldr	r3, [pc, #312]	@ (8003a24 <PutDownMaterial+0x1b4>)
 80038ea:	795b      	ldrb	r3, [r3, #5]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d1f0      	bne.n	80038d2 <PutDownMaterial+0x62>
 80038f0:	4b4c      	ldr	r3, [pc, #304]	@ (8003a24 <PutDownMaterial+0x1b4>)
 80038f2:	79db      	ldrb	r3, [r3, #7]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d1ec      	bne.n	80038d2 <PutDownMaterial+0x62>
 80038f8:	e000      	b.n	80038fc <PutDownMaterial+0x8c>
		if(tick>=10000) break;
 80038fa:	bf00      	nop
	};
	if(motor_statuses[2].is_reach==0 || motor_statuses[3].is_reach==0)
 80038fc:	4b49      	ldr	r3, [pc, #292]	@ (8003a24 <PutDownMaterial+0x1b4>)
 80038fe:	795b      	ldrb	r3, [r3, #5]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00b      	beq.n	800391c <PutDownMaterial+0xac>
 8003904:	4b47      	ldr	r3, [pc, #284]	@ (8003a24 <PutDownMaterial+0x1b4>)
 8003906:	79db      	ldrb	r3, [r3, #7]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <PutDownMaterial+0xac>
		 *
		 * */
	}
	else
	{
		motor_statuses[2].is_reach=0;
 800390c:	4b45      	ldr	r3, [pc, #276]	@ (8003a24 <PutDownMaterial+0x1b4>)
 800390e:	2200      	movs	r2, #0
 8003910:	715a      	strb	r2, [r3, #5]
		motor_statuses[3].is_reach=0;
 8003912:	4b44      	ldr	r3, [pc, #272]	@ (8003a24 <PutDownMaterial+0x1b4>)
 8003914:	2200      	movs	r2, #0
 8003916:	71da      	strb	r2, [r3, #7]
		tick=0;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
	}

/*---------------------------整体降到放料点-------------------------*/
	MoveFifthMotor(500, 50, PutDown_position[num]);
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	4a40      	ldr	r2, [pc, #256]	@ (8003a20 <PutDownMaterial+0x1b0>)
 8003920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003924:	461a      	mov	r2, r3
 8003926:	2132      	movs	r1, #50	@ 0x32
 8003928:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800392c:	f7ff ff0a 	bl	8003744 <MoveFifthMotor>
	while(motor_statuses[4].is_reach!=1)
 8003930:	e00a      	b.n	8003948 <PutDownMaterial+0xd8>
	{
		HAL_Delay(50);
 8003932:	2032      	movs	r0, #50	@ 0x32
 8003934:	f7fd fb16 	bl	8000f64 <HAL_Delay>
		tick+=1;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	3301      	adds	r3, #1
 800393c:	60fb      	str	r3, [r7, #12]
		if(tick>=10000) break;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003944:	4293      	cmp	r3, r2
 8003946:	d804      	bhi.n	8003952 <PutDownMaterial+0xe2>
	while(motor_statuses[4].is_reach!=1)
 8003948:	4b36      	ldr	r3, [pc, #216]	@ (8003a24 <PutDownMaterial+0x1b4>)
 800394a:	7a5b      	ldrb	r3, [r3, #9]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d1f0      	bne.n	8003932 <PutDownMaterial+0xc2>
 8003950:	e000      	b.n	8003954 <PutDownMaterial+0xe4>
		if(tick>=10000) break;
 8003952:	bf00      	nop
	};
	if(motor_statuses[4].is_reach==0)
 8003954:	4b33      	ldr	r3, [pc, #204]	@ (8003a24 <PutDownMaterial+0x1b4>)
 8003956:	7a5b      	ldrb	r3, [r3, #9]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d004      	beq.n	8003966 <PutDownMaterial+0xf6>
		 *
		 * */
	}
	else
	{
		motor_statuses[4].is_reach=0;
 800395c:	4b31      	ldr	r3, [pc, #196]	@ (8003a24 <PutDownMaterial+0x1b4>)
 800395e:	2200      	movs	r2, #0
 8003960:	725a      	strb	r2, [r3, #9]
		tick=0;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
	}

/*---------------------------钩子松开-------------------------*/
	MoveFirstGMotors(1, 1000, 100);
 8003966:	2264      	movs	r2, #100	@ 0x64
 8003968:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800396c:	2001      	movs	r0, #1
 800396e:	f7ff fe83 	bl	8003678 <MoveFirstGMotors>
	while(motor_statuses[0].is_reach!=1 || motor_statuses[1].is_reach!=1)
 8003972:	e00a      	b.n	800398a <PutDownMaterial+0x11a>
	{
		HAL_Delay(50);
 8003974:	2032      	movs	r0, #50	@ 0x32
 8003976:	f7fd faf5 	bl	8000f64 <HAL_Delay>
		tick+=1;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	3301      	adds	r3, #1
 800397e:	60fb      	str	r3, [r7, #12]
		if(tick>=10000) break;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003986:	4293      	cmp	r3, r2
 8003988:	d808      	bhi.n	800399c <PutDownMaterial+0x12c>
	while(motor_statuses[0].is_reach!=1 || motor_statuses[1].is_reach!=1)
 800398a:	4b26      	ldr	r3, [pc, #152]	@ (8003a24 <PutDownMaterial+0x1b4>)
 800398c:	785b      	ldrb	r3, [r3, #1]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d1f0      	bne.n	8003974 <PutDownMaterial+0x104>
 8003992:	4b24      	ldr	r3, [pc, #144]	@ (8003a24 <PutDownMaterial+0x1b4>)
 8003994:	78db      	ldrb	r3, [r3, #3]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d1ec      	bne.n	8003974 <PutDownMaterial+0x104>
 800399a:	e000      	b.n	800399e <PutDownMaterial+0x12e>
		if(tick>=10000) break;
 800399c:	bf00      	nop
	};
	if(motor_statuses[0].is_reach==0 || motor_statuses[1].is_reach==0 )
 800399e:	4b21      	ldr	r3, [pc, #132]	@ (8003a24 <PutDownMaterial+0x1b4>)
 80039a0:	785b      	ldrb	r3, [r3, #1]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00b      	beq.n	80039be <PutDownMaterial+0x14e>
 80039a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003a24 <PutDownMaterial+0x1b4>)
 80039a8:	78db      	ldrb	r3, [r3, #3]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d007      	beq.n	80039be <PutDownMaterial+0x14e>
		 *
		 * */
	}
	else
	{
		motor_statuses[0].is_reach=0;
 80039ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003a24 <PutDownMaterial+0x1b4>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	705a      	strb	r2, [r3, #1]
		motor_statuses[1].is_reach=0;
 80039b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a24 <PutDownMaterial+0x1b4>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	70da      	strb	r2, [r3, #3]
		tick=0;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
	}
/*---------------------------小臂后缩-------------------------*/
	MoveSecondGMotors(1, 1000, 50);
 80039be:	2232      	movs	r2, #50	@ 0x32
 80039c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80039c4:	2001      	movs	r0, #1
 80039c6:	f7ff fe8d 	bl	80036e4 <MoveSecondGMotors>
	while(motor_statuses[2].is_reach!=1 || motor_statuses[3].is_reach!=1)
 80039ca:	e00a      	b.n	80039e2 <PutDownMaterial+0x172>
	{
		HAL_Delay(50);
 80039cc:	2032      	movs	r0, #50	@ 0x32
 80039ce:	f7fd fac9 	bl	8000f64 <HAL_Delay>
		tick+=1;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	3301      	adds	r3, #1
 80039d6:	60fb      	str	r3, [r7, #12]
		if(tick>=10000) break;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f242 720f 	movw	r2, #9999	@ 0x270f
 80039de:	4293      	cmp	r3, r2
 80039e0:	d808      	bhi.n	80039f4 <PutDownMaterial+0x184>
	while(motor_statuses[2].is_reach!=1 || motor_statuses[3].is_reach!=1)
 80039e2:	4b10      	ldr	r3, [pc, #64]	@ (8003a24 <PutDownMaterial+0x1b4>)
 80039e4:	795b      	ldrb	r3, [r3, #5]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d1f0      	bne.n	80039cc <PutDownMaterial+0x15c>
 80039ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003a24 <PutDownMaterial+0x1b4>)
 80039ec:	79db      	ldrb	r3, [r3, #7]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d1ec      	bne.n	80039cc <PutDownMaterial+0x15c>
 80039f2:	e000      	b.n	80039f6 <PutDownMaterial+0x186>
		if(tick>=10000) break;
 80039f4:	bf00      	nop
	};
	if(motor_statuses[2].is_reach==0 || motor_statuses[3].is_reach==0)
 80039f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <PutDownMaterial+0x1b4>)
 80039f8:	795b      	ldrb	r3, [r3, #5]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <PutDownMaterial+0x1a6>
 80039fe:	4b09      	ldr	r3, [pc, #36]	@ (8003a24 <PutDownMaterial+0x1b4>)
 8003a00:	79db      	ldrb	r3, [r3, #7]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d007      	beq.n	8003a16 <PutDownMaterial+0x1a6>
		 *
		 * */
	}
	else
	{
		motor_statuses[2].is_reach=0;
 8003a06:	4b07      	ldr	r3, [pc, #28]	@ (8003a24 <PutDownMaterial+0x1b4>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	715a      	strb	r2, [r3, #5]
		motor_statuses[3].is_reach=0;
 8003a0c:	4b05      	ldr	r3, [pc, #20]	@ (8003a24 <PutDownMaterial+0x1b4>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	71da      	strb	r2, [r3, #7]
		tick=0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
	}

}
 8003a16:	bf00      	nop
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000114 	.word	0x20000114
 8003a24:	200000ec 	.word	0x200000ec

08003a28 <IO_Tran>:

void IO_Tran(void)															//输出IO信号 料仓告知机器人料盘到位
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, Y1_Pin, GPIO_PIN_RESET);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2140      	movs	r1, #64	@ 0x40
 8003a30:	4806      	ldr	r0, [pc, #24]	@ (8003a4c <IO_Tran+0x24>)
 8003a32:	f7fe fc1b 	bl	800226c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003a36:	2064      	movs	r0, #100	@ 0x64
 8003a38:	f7fd fa94 	bl	8000f64 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, Y1_Pin, GPIO_PIN_SET);
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	2140      	movs	r1, #64	@ 0x40
 8003a40:	4802      	ldr	r0, [pc, #8]	@ (8003a4c <IO_Tran+0x24>)
 8003a42:	f7fe fc13 	bl	800226c <HAL_GPIO_WritePin>
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40020800 	.word	0x40020800

08003a50 <IO_Read>:

uint8_t IO_Read(void)															//输入IO 机器人告知料仓已近取完
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(X1_GPIO_Port, X1_Pin)==0)
 8003a54:	2101      	movs	r1, #1
 8003a56:	4807      	ldr	r0, [pc, #28]	@ (8003a74 <IO_Read+0x24>)
 8003a58:	f7fe fbf0 	bl	800223c <HAL_GPIO_ReadPin>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d104      	bne.n	8003a6c <IO_Read+0x1c>
	{
		inputs[0]=1;
 8003a62:	4b05      	ldr	r3, [pc, #20]	@ (8003a78 <IO_Read+0x28>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	701a      	strb	r2, [r3, #0]
		return 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	e000      	b.n	8003a6e <IO_Read+0x1e>
	}
	else
		return 1;
 8003a6c:	2301      	movs	r3, #1

}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40020000 	.word	0x40020000
 8003a78:	200000f8 	.word	0x200000f8

08003a7c <Run>:

void Run(uint8_t num)														//机器人加工一盘 流程:取盘、完成、放盘
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	71fb      	strb	r3, [r7, #7]

	if (sys_state==1 && stop_state==0)
 8003a86:	4b20      	ldr	r3, [pc, #128]	@ (8003b08 <Run+0x8c>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d10c      	bne.n	8003aa8 <Run+0x2c>
 8003a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8003b0c <Run+0x90>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d108      	bne.n	8003aa8 <Run+0x2c>
	{
		GetMaterial(num);
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fe65 	bl	8003768 <GetMaterial>
		IO_Tran();
 8003a9e:	f7ff ffc3 	bl	8003a28 <IO_Tran>
		sys_state=2;
 8003aa2:	4b19      	ldr	r3, [pc, #100]	@ (8003b08 <Run+0x8c>)
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	701a      	strb	r2, [r3, #0]
	}


	while (IO_Read()!=0);
 8003aa8:	bf00      	nop
 8003aaa:	f7ff ffd1 	bl	8003a50 <IO_Read>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1fa      	bne.n	8003aaa <Run+0x2e>

	if(inputs[0]==1 &&sys_state==2 && stop_state==0)
 8003ab4:	4b16      	ldr	r3, [pc, #88]	@ (8003b10 <Run+0x94>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d111      	bne.n	8003ae0 <Run+0x64>
 8003abc:	4b12      	ldr	r3, [pc, #72]	@ (8003b08 <Run+0x8c>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d10d      	bne.n	8003ae0 <Run+0x64>
 8003ac4:	4b11      	ldr	r3, [pc, #68]	@ (8003b0c <Run+0x90>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d109      	bne.n	8003ae0 <Run+0x64>
	{
		inputs[0]=0;
 8003acc:	4b10      	ldr	r3, [pc, #64]	@ (8003b10 <Run+0x94>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	701a      	strb	r2, [r3, #0]
		sys_state=3;
 8003ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8003b08 <Run+0x8c>)
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 8003ad8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003adc:	f7fd fa42 	bl	8000f64 <HAL_Delay>
	}

	if(sys_state==3 && stop_state==0)
 8003ae0:	4b09      	ldr	r3, [pc, #36]	@ (8003b08 <Run+0x8c>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d10a      	bne.n	8003afe <Run+0x82>
 8003ae8:	4b08      	ldr	r3, [pc, #32]	@ (8003b0c <Run+0x90>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d106      	bne.n	8003afe <Run+0x82>
	{
		PutDownMaterial(num);
 8003af0:	79fb      	ldrb	r3, [r7, #7]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff febc 	bl	8003870 <PutDownMaterial>
		sys_state=1;
 8003af8:	4b03      	ldr	r3, [pc, #12]	@ (8003b08 <Run+0x8c>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	701a      	strb	r2, [r3, #0]
	}
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000128 	.word	0x20000128
 8003b0c:	20000129 	.word	0x20000129
 8003b10:	200000f8 	.word	0x200000f8

08003b14 <Sys_Run>:

void Sys_Run(uint8_t stratnum)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	71fb      	strb	r3, [r7, #7]
	uint8_t i=stratnum;
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	73fb      	strb	r3, [r7, #15]
	for(i;i>=1;i--)
 8003b22:	e006      	b.n	8003b32 <Sys_Run+0x1e>
	{
		Run(i);
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff ffa8 	bl	8003a7c <Run>
	for(i;i>=1;i--)
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	73fb      	strb	r3, [r7, #15]
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1f5      	bne.n	8003b24 <Sys_Run+0x10>
	}
}
 8003b38:	bf00      	nop
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <memset>:
 8003b42:	4402      	add	r2, r0
 8003b44:	4603      	mov	r3, r0
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d100      	bne.n	8003b4c <memset+0xa>
 8003b4a:	4770      	bx	lr
 8003b4c:	f803 1b01 	strb.w	r1, [r3], #1
 8003b50:	e7f9      	b.n	8003b46 <memset+0x4>
	...

08003b54 <__libc_init_array>:
 8003b54:	b570      	push	{r4, r5, r6, lr}
 8003b56:	4d0d      	ldr	r5, [pc, #52]	@ (8003b8c <__libc_init_array+0x38>)
 8003b58:	4c0d      	ldr	r4, [pc, #52]	@ (8003b90 <__libc_init_array+0x3c>)
 8003b5a:	1b64      	subs	r4, r4, r5
 8003b5c:	10a4      	asrs	r4, r4, #2
 8003b5e:	2600      	movs	r6, #0
 8003b60:	42a6      	cmp	r6, r4
 8003b62:	d109      	bne.n	8003b78 <__libc_init_array+0x24>
 8003b64:	4d0b      	ldr	r5, [pc, #44]	@ (8003b94 <__libc_init_array+0x40>)
 8003b66:	4c0c      	ldr	r4, [pc, #48]	@ (8003b98 <__libc_init_array+0x44>)
 8003b68:	f000 f818 	bl	8003b9c <_init>
 8003b6c:	1b64      	subs	r4, r4, r5
 8003b6e:	10a4      	asrs	r4, r4, #2
 8003b70:	2600      	movs	r6, #0
 8003b72:	42a6      	cmp	r6, r4
 8003b74:	d105      	bne.n	8003b82 <__libc_init_array+0x2e>
 8003b76:	bd70      	pop	{r4, r5, r6, pc}
 8003b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b7c:	4798      	blx	r3
 8003b7e:	3601      	adds	r6, #1
 8003b80:	e7ee      	b.n	8003b60 <__libc_init_array+0xc>
 8003b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b86:	4798      	blx	r3
 8003b88:	3601      	adds	r6, #1
 8003b8a:	e7f2      	b.n	8003b72 <__libc_init_array+0x1e>
 8003b8c:	08003bcc 	.word	0x08003bcc
 8003b90:	08003bcc 	.word	0x08003bcc
 8003b94:	08003bcc 	.word	0x08003bcc
 8003b98:	08003bd0 	.word	0x08003bd0

08003b9c <_init>:
 8003b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9e:	bf00      	nop
 8003ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba2:	bc08      	pop	{r3}
 8003ba4:	469e      	mov	lr, r3
 8003ba6:	4770      	bx	lr

08003ba8 <_fini>:
 8003ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003baa:	bf00      	nop
 8003bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bae:	bc08      	pop	{r3}
 8003bb0:	469e      	mov	lr, r3
 8003bb2:	4770      	bx	lr
