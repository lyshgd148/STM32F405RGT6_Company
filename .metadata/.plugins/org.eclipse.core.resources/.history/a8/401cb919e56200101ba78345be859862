/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "can.h"
#include "tim.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "motor.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */


#define motor_num 5
#define pos_num   2


typedef struct {
    uint8_t id;				//1,2,3,4,5
    uint8_t isreach_pos;
    uint8_t pos_next;
} MotorStatus;


MotorStatus motor_statuses[motor_num];
uint8_t inputs[motor_num]={0,0,0,0,0};

int32_t position[motor_num][pos_num]={
		{240000,-200},
		{-240000,200},
		{-79000,5000},
		{-79000,5000},
		{200000,1000}
};


uint8_t txBuffer[8];

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
void read_state_run(void)	//all inputs
{
	uint8_t i;

	/*-----------------------------------------------------------*/
	if(HAL_GPIO_ReadPin(X1_GPIO_Port, X1_Pin)==0)	inputs[0]=1;
	if(HAL_GPIO_ReadPin(X2_GPIO_Port, X2_Pin)==0)	inputs[1]=1;
	if(HAL_GPIO_ReadPin(X3_GPIO_Port, X3_Pin)==0)	inputs[2]=1;
	if(HAL_GPIO_ReadPin(X4_GPIO_Port, X4_Pin)==0)	inputs[3]=1;
	if(HAL_GPIO_ReadPin(X5_GPIO_Port, X5_Pin)==0)	inputs[4]=1;

	/*-----------------------------------------------------------*/
	for(i=0;i<motor_num;i++)
	{
		if(motor_statuses[i].isreach_pos==1)
		{
			motor_statuses[i].isreach_pos=2;
			if(motor_statuses[i].pos_next!=0)
			{
				motor_statuses[i].pos_next+=1;
				if(motor_statuses[i].pos_next>pos_num) motor_statuses[i].pos_next=1;
			}
			else
				motor_statuses[i].pos_next=1;
		}
	}

	/*-----------------------------------------------------------*/

	if(inputs[0]==1)
	{
		inputs[0]=0;
		if(motor_statuses[0].isreach_pos==2 && motor_statuses[1].isreach_pos==2 )
		{
			motor_statuses[0].isreach_pos=0; motor_statuses[1].isreach_pos=0;

			motorGoPosition(1,1000,100,position[0][motor_statuses[0].pos_next-1]);
			motorGoPosition(2,1000,100,position[1][motor_statuses[1].pos_next-1]);
		}
	}

	if(inputs[1]==1)
	{
		inputs[1]=0;
		if(motor_statuses[2].isreach_pos==2 && motor_statuses[3].isreach_pos==2 )
		{
			motor_statuses[2].isreach_pos=0; motor_statuses[3].isreach_pos=0;

			motorGoPosition(3,1000,100,position[2][motor_statuses[2].pos_next-1]);
			motorGoPosition(4,1000,100,position[3][motor_statuses[3].pos_next-1]);
		}
	}

	if(inputs[2]==1)
	{
		inputs[2]=0;
		if(motor_statuses[4].isreach_pos==2)
		{
			motor_statuses[4].isreach_pos=0;

			motorGoPosition(5,500,60,position[4][motor_statuses[4].pos_next-1]);
		}
		HAL_Delay(400);
	}

	if(inputs[3]==1)
	{
		uint8_t canGoHome=1;
		for(i=0;i<motor_num;i++)
		{
			if(motor_statuses[i].isreach_pos!=2)
			{
				canGoHome=0;
				break;
			}

		}

		if(canGoHome==1)
		{
			for(i=0;i<motor_num;i++)
				motor_statuses[i].isreach_pos=0;

			inputs[3]=0;

			motorGoHome(1);
			motorGoHome(2);
			motorGoHome(3);
			motorGoHome(4);
			motorGoHome(5);
			HAL_Delay(3000);
			while(motor_statuses[0].isreach_pos==0 || motor_statuses[1].isreach_pos==0 || motor_statuses[3].isreach_pos==0 || motor_statuses[3].isreach_pos==0 ||motor_statuses[4].isreach_pos==0 )
			{
				HAL_Delay(100);
			}

		}



	}

}

void Motor_Init(void)
{
	uint8_t i;

	for(i=0;i<motor_num;i++)
	{
	  motor_statuses[i].id = i+1;
	  motor_statuses[i].isreach_pos =0;	//	//查询手册知道 正转一圈编码器值 +0x4000=16384 位置是以编码器的值为准的
	  motor_statuses[i].pos_next = 0;//

	}
}


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM3_Init();
  MX_TIM6_Init();
  MX_CAN1_Init();
  /* USER CODE BEGIN 2 */
  CAN1_Config();
  //初始化电机
  Motor_Init();



  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(1500);
  HAL_GPIO_WritePin(Y6_GPIO_Port, Y6_Pin, GPIO_PIN_RESET);//yellowled_S

  motorGoHome(1);//1回零
  HAL_Delay(50);
  motorGoHome(2);//2回零
  HAL_Delay(50);
  motorGoHome(3);//1回零
  HAL_Delay(50);
  motorGoHome(4);//2回零
  HAL_Delay(50);
  motorGoHome(5);//1回零
  HAL_Delay(1000);

  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	read_state_run();

	HAL_Delay(50);

	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
  }

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
